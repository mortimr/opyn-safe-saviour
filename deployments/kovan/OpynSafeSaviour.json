{
  "address": "0x69f656e8230BE5F2120796a49eDCed6b1cEa3B3B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidationEngine",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oracleRelayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_safeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_saviourRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opynSafeSaviourOperator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_keeperPayout",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minKeeperPayoutValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_payoutToSAFESize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_defaultDesiredCollateralizationRatio",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "safeHandler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "collateralType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "safeHandler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAddedOrDebtRepaid",
          "type": "uint256"
        }
      ],
      "name": "SaveSAFE",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "safeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "safeHandler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cRatio",
          "type": "uint256"
        }
      ],
      "name": "SetDesiredCollateralizationRatio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "safeID",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "safeHandler",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CRATIO_SCALE_DOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HUNDRED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CRATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_UINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "THOUSAND",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAD_COMPLEMENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeHandler",
          "type": "address"
        }
      ],
      "name": "canSave",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralJoin",
      "outputs": [
        {
          "internalType": "contract CollateralJoinLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract ERC20Like",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultDesiredCollateralizationRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_safeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_oTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oTokenType",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "desiredCollateralizationRatios",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getKeeperPayoutValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperPayoutExceedsMinValue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationEngine",
      "outputs": [
        {
          "internalType": "contract LiquidationEngineLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minKeeperPayoutValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oTokenCover",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "oTokenSelection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opynSafeSaviourOperator",
      "outputs": [
        {
          "internalType": "contract OpynSafeSaviourOperator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleRelayer",
      "outputs": [
        {
          "internalType": "contract OracleRelayerLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutToSAFESize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeEngine",
      "outputs": [
        {
          "internalType": "contract SAFEEngineLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeManager",
      "outputs": [
        {
          "internalType": "contract GebSafeManagerLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_collateralType",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_safeHandler",
          "type": "address"
        }
      ],
      "name": "saveSAFE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "saviourRegistry",
      "outputs": [
        {
          "internalType": "contract SAFESaviourRegistryLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_safeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_cRatio",
          "type": "uint256"
        }
      ],
      "name": "setDesiredCollateralizationRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_safeHandler",
          "type": "address"
        }
      ],
      "name": "tokenAmountUsedToSave",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountUsed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_safeID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_oTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xcab50b10c96739cd33aeee04970897cb222e3a37a95e16b15a081cc771592db6",
  "receipt": {
    "to": null,
    "from": "0xB4410cA4B6c25102A0De8863B83A0Bc6F94f7d24",
    "contractAddress": "0x69f656e8230BE5F2120796a49eDCed6b1cEa3B3B",
    "transactionIndex": 1,
    "gasUsed": "3200931",
    "logsBloom": "0x
    "blockHash": "0xc077a3344fb2bc8cb001ad71c309f3f8cd7b7e81dade0c1d833dac27174407e0",
    "transactionHash": "0xcab50b10c96739cd33aeee04970897cb222e3a37a95e16b15a081cc771592db6",
    "logs": [],
    "blockNumber": 23931831,
    "cumulativeGasUsed": "3241852",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xad4AB4Cb7b8aDC45Bf2873507fC8700f3dFB9Dd3",
    "0x75A807a667FbcB303f46c0F8Ca45fdfEF8fdC9AC",
    "0xE5Ae4E49bEA485B5E5172EE6b1F99243cB15225c",
    "0x807C8eCb73d9c8203d2b1369E678098B9370F2EA",
    "0xB19bc2e13Bd6BAeeE8c0D8282387221D7f9b8833",
    "0xE4C986d61a961237468f235D64766115aEc738ed",
    "500000000000000000",
    "500000000000000000000",
    "10",
    "170"
  ],
  "solcInputHash": "4ab7740a3c4c741a16859aca93eee72c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidationEngine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracleRelayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_safeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_saviourRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opynSafeSaviourOperator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_keeperPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minKeeperPayoutValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_payoutToSAFESize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultDesiredCollateralizationRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"collateralType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAddedOrDebtRepaid\",\"type\":\"uint256\"}],\"name\":\"SaveSAFE\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cRatio\",\"type\":\"uint256\"}],\"name\":\"SetDesiredCollateralizationRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"safeID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"safeHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CRATIO_SCALE_DOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HUNDRED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CRATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_UINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"THOUSAND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAD_COMPLEMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeHandler\",\"type\":\"address\"}],\"name\":\"canSave\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralJoin\",\"outputs\":[{\"internalType\":\"contract CollateralJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract ERC20Like\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDesiredCollateralizationRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oTokenType\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"desiredCollateralizationRatios\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getKeeperPayoutValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperPayoutExceedsMinValue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationEngine\",\"outputs\":[{\"internalType\":\"contract LiquidationEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minKeeperPayoutValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oTokenCover\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"oTokenSelection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opynSafeSaviourOperator\",\"outputs\":[{\"internalType\":\"contract OpynSafeSaviourOperator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleRelayer\",\"outputs\":[{\"internalType\":\"contract OracleRelayerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutToSAFESize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeEngine\",\"outputs\":[{\"internalType\":\"contract SAFEEngineLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeManager\",\"outputs\":[{\"internalType\":\"contract GebSafeManagerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_collateralType\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_safeHandler\",\"type\":\"address\"}],\"name\":\"saveSAFE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saviourRegistry\",\"outputs\":[{\"internalType\":\"contract SAFESaviourRegistryLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_cRatio\",\"type\":\"uint256\"}],\"name\":\"setDesiredCollateralizationRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeHandler\",\"type\":\"address\"}],\"name\":\"tokenAmountUsedToSave\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountUsed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_safeID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_oTokenAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/saviours/OpynSafeSaviour.sol\":\"OpynSafeSaviour\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/CollateralJoinLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract CollateralJoinLike {\\n    function safeEngine() public view virtual returns (address);\\n\\n    function collateralType() public view virtual returns (bytes32);\\n\\n    function collateral() public view virtual returns (address);\\n\\n    function decimals() public view virtual returns (uint256);\\n\\n    function contractEnabled() public view virtual returns (uint256);\\n\\n    function join(address, uint256) external virtual;\\n}\\n\",\"keccak256\":\"0x9131aeca50a5c119f5733fd5b6d70e42fdd28a9b007c51cfb49ca3e608721e00\",\"license\":\"MIT\"},\"contracts/interfaces/ERC20Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract ERC20Like {\\n    uint256 public totalSupply;\\n\\n    function balanceOf(address guy) public virtual returns (uint256);\\n\\n    function approve(address guy, uint256 wad) public virtual returns (bool);\\n\\n    function transfer(address dst, uint256 wad) public virtual returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public virtual returns (bool);\\n}\\n\",\"keccak256\":\"0x8081233eac98e09db40d13bd2c010944dcd6d4289b2e90710fa1e88cc7b1bf60\",\"license\":\"MIT\"},\"contracts/interfaces/GebSafeManagerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract GebSafeManagerLike {\\n    function safes(uint256) public view virtual returns (address);\\n\\n    function ownsSAFE(uint256) public view virtual returns (address);\\n\\n    function safeCan(\\n        address,\\n        uint256,\\n        address\\n    ) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x0dfc6582af1b9f5307365b8853d94053007652c54dbee67da3b5593f18188321\",\"license\":\"MIT\"},\"contracts/interfaces/LiquidationEngineLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract LiquidationEngineLike {\\n    function safeSaviours(address) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xfdc990e5067839ef3678da99897706a07f555982d2f312776dbb1162c7b5f8ff\",\"license\":\"MIT\"},\"contracts/interfaces/OpynV2ControllerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nenum ActionType {\\n    OpenVault,\\n    MintShortOption,\\n    BurnShortOption,\\n    DepositLongOption,\\n    WithdrawLongOption,\\n    DepositCollateral,\\n    WithdrawCollateral,\\n    SettleVault,\\n    Redeem,\\n    Call\\n}\\n\\nstruct ActionArgs {\\n    ActionType actionType;\\n    address owner;\\n    address secondAddress;\\n    address asset;\\n    uint256 vaultId;\\n    uint256 amount;\\n    uint256 index;\\n    bytes data;\\n}\\n\\nabstract contract OpynV2ControllerLike {\\n    function operate(ActionArgs[] calldata _actions) external virtual;\\n\\n    function getPayout(address _otoken, uint256 _amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3a33dfe273e841233898bc995db5183cad55dcbe16eb1bd82606735640fc6f1\",\"license\":\"MIT\"},\"contracts/interfaces/OpynV2OTokenLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract OpynV2OTokenLike {\\n    function getOtokenDetails()\\n        external\\n        view\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x31640b1ae94aff696fdf6c79b5c3189e8d5cf1564e432540ffc536b778dcc889\",\"license\":\"MIT\"},\"contracts/interfaces/OpynV2WhitelistLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract OpynV2WhitelistLike {\\n    function isWhitelistedOtoken(address _otoken) external view virtual returns (bool);\\n}\\n\",\"keccak256\":\"0xf70a8e96892a3282e545eb56bd0e28249a271e846533325aa9e8424edec64fee\",\"license\":\"MIT\"},\"contracts/interfaces/OracleRelayerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract OracleRelayerLike {\\n    function collateralTypes(bytes32)\\n        public\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function liquidationCRatio(bytes32) public view virtual returns (uint256);\\n\\n    function redemptionPrice() public virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x82f404b7d2281ce069dee8fb11443884ca612d6498d97629aef3378426853d1d\",\"license\":\"MIT\"},\"contracts/interfaces/PriceFeedLike.sol\":{\"content\":\"// Copyright (C) 2020 Reflexer Labs, INC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract PriceFeedLike {\\n    function priceSource() public view virtual returns (address);\\n\\n    function getResultWithValidity() external view virtual returns (uint256, bool);\\n}\\n\",\"keccak256\":\"0x90c700b7139f9feed43491c6b010dd155b6add8e277a32f1ab911ef9ad26f1a5\",\"license\":\"MIT\"},\"contracts/interfaces/SAFEEngineLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract SAFEEngineLike {\\n    function safeRights(address, address) public view virtual returns (uint256);\\n\\n    function collateralTypes(bytes32)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 debtAmount, // [wad]\\n            uint256 accumulatedRate, // [ray]\\n            uint256 safetyPrice, // [ray]\\n            uint256 debtCeiling, // [rad]\\n            uint256 debtFloor, // [rad]\\n            uint256 liquidationPrice // [ray]\\n        );\\n\\n    function safes(bytes32, address)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256 lockedCollateral, // [wad]\\n            uint256 generatedDebt // [wad]\\n        );\\n\\n    function modifySAFECollateralization(\\n        bytes32 collateralType,\\n        address safe,\\n        address collateralSource,\\n        address debtDestination,\\n        int256 deltaCollateral, // [wad]\\n        int256 deltaDebt // [wad]\\n    ) external virtual;\\n}\\n\",\"keccak256\":\"0x9739bdded0a1abba2260eaf8da08945599eb6cf38111fce0e44501e86321892c\",\"license\":\"MIT\"},\"contracts/interfaces/SAFESaviourRegistryLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract SAFESaviourRegistryLike {\\n    mapping(address => uint256) public authorizedAccounts;\\n\\n    function markSave(bytes32 collateralType, address safeHandler) external virtual;\\n}\\n\",\"keccak256\":\"0x08de61f2b8d891c2f7358b985655a17f4697a6fa034f5cad20b4c252e742662a\",\"license\":\"MIT\"},\"contracts/interfaces/SafeSaviourLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nimport './CollateralJoinLike.sol';\\nimport './OracleRelayerLike.sol';\\nimport './SAFEEngineLike.sol';\\nimport './LiquidationEngineLike.sol';\\nimport './PriceFeedLike.sol';\\nimport './ERC20Like.sol';\\nimport './GebSafeManagerLike.sol';\\nimport './SAFESaviourRegistryLike.sol';\\n\\nimport '../utils/ReentrancyGuard.sol';\\n\\nabstract contract SafeSaviourLike is ReentrancyGuard {\\n    // --- Variables ---\\n    LiquidationEngineLike public liquidationEngine;\\n    OracleRelayerLike public oracleRelayer;\\n    GebSafeManagerLike public safeManager;\\n    SAFEEngineLike public safeEngine;\\n    SAFESaviourRegistryLike public saviourRegistry;\\n\\n    // --- Boolean Logic ---\\n    function both(bool x, bool y) internal pure returns (bool z) {\\n        assembly {\\n            z := and(x, y)\\n        }\\n    }\\n\\n    function either(bool x, bool y) internal pure returns (bool z) {\\n        assembly {\\n            z := or(x, y)\\n        }\\n    }\\n\\n    // The amount of tokens the keeper gets in exchange for the gas spent to save a SAFE\\n    uint256 public keeperPayout; // [wad]\\n    // The minimum fiat value that the keeper must get in exchange for saving a SAFE\\n    uint256 public minKeeperPayoutValue; // [wad]\\n    /*\\n      The proportion between the keeperPayout (if it's in collateral) and the amount of collateral that's in a SAFE to be saved.\\n      Alternatively, it can be the proportion between the fiat value of keeperPayout and the fiat value of the profit that a keeper\\n      could make if a SAFE is liquidated right now. It ensures there's no incentive to intentionally put a SAFE underwater and then\\n      save it just to make a profit that's greater than the one from participating in collateral auctions\\n    */\\n    uint256 public payoutToSAFESize;\\n    // The default collateralization ratio a SAFE should have after it's saved\\n    uint256 public defaultDesiredCollateralizationRatio; // [percentage]\\n\\n    // Desired CRatios for each SAFE after they're saved\\n    mapping(bytes32 => mapping(address => uint256)) public desiredCollateralizationRatios;\\n\\n    // --- Constants ---\\n    uint256 public constant ONE = 1;\\n    uint256 public constant HUNDRED = 100;\\n    uint256 public constant THOUSAND = 1000;\\n    uint256 public constant CRATIO_SCALE_DOWN = 10**25;\\n    uint256 public constant WAD_COMPLEMENT = 10**9;\\n    uint256 public constant WAD = 10**18;\\n    uint256 public constant RAY = 10**27;\\n    uint256 public constant MAX_CRATIO = 1000;\\n    uint256 public constant MAX_UINT = uint256(-1);\\n\\n    // --- Events ---\\n    event SetDesiredCollateralizationRatio(\\n        address indexed caller,\\n        uint256 indexed safeID,\\n        address indexed safeHandler,\\n        uint256 cRatio\\n    );\\n    event SaveSAFE(\\n        address indexed keeper,\\n        bytes32 indexed collateralType,\\n        address indexed safeHandler,\\n        uint256 collateralAddedOrDebtRepaid\\n    );\\n\\n    // --- Functions to Implement ---\\n    function saveSAFE(\\n        address,\\n        bytes32,\\n        address\\n    )\\n        external\\n        virtual\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getKeeperPayoutValue() public virtual returns (uint256);\\n\\n    function keeperPayoutExceedsMinValue() public virtual returns (bool);\\n\\n    function canSave(address) external virtual returns (bool);\\n\\n    function tokenAmountUsedToSave(address) public virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xe0a1b836304332ea85a508fc602fa125c399693b93b296c7e0091b20b0c0877a\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapV2Router02Like.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract UniswapV2Router02Like {\\n    function getAmountsIn(uint256 amountOut, address[] memory path)\\n        public\\n        view\\n        virtual\\n        returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external virtual returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x5fca7e91ba9cdaf13539395d0727694603c94eac977b95de23698b1573199d7d\",\"license\":\"MIT\"},\"contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\ncontract SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, 'SafeMath: addition overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, 'SafeMath: subtraction overflow');\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, 'SafeMath: multiplication overflow');\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, 'SafeMath: division by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, 'SafeMath: modulo by zero');\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3c912e03c883781b72a7052a2775decf9b96616cad46fc1f38683cd330450179\",\"license\":\"MIT\"},\"contracts/saviours/OpynSafeSaviour.sol\":{\"content\":\"// Copyright (C) 2020 Reflexer Labs, INC\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.8.2;\\n\\nimport '../interfaces/SafeSaviourLike.sol';\\nimport './OpynSafeSaviourOperator.sol';\\nimport '../math/SafeMath.sol';\\n\\ncontract OpynSafeSaviour is SafeMath, SafeSaviourLike {\\n    // --- Variables ---\\n    // Amount of collateral deposited to cover each SAFE\\n    mapping(address => uint256) public oTokenCover;\\n    // oToken type selected by each SAFE\\n    mapping(address => address) public oTokenSelection;\\n    // The collateral join contract for adding collateral in the system\\n    CollateralJoinLike public collateralJoin;\\n    // The collateral token\\n    ERC20Like public collateralToken;\\n    // Operator handling all the Opyn logic\\n    OpynSafeSaviourOperator public opynSafeSaviourOperator;\\n\\n    // Checks whether a saviour contract has been approved by governance in the LiquidationEngine\\n    modifier liquidationEngineApproved(address saviour) {\\n        require(liquidationEngine.safeSaviours(saviour) == 1, 'SafeSaviour/not-approved-in-liquidation-engine');\\n        _;\\n    }\\n    // Checks whether someone controls a safe handler inside the GebSafeManager\\n    modifier controlsSAFE(address owner, uint256 safeID) {\\n        require(owner != address(0), 'SafeSaviour/null-owner');\\n        require(\\n            either(\\n                owner == safeManager.ownsSAFE(safeID),\\n                safeManager.safeCan(safeManager.ownsSAFE(safeID), safeID, owner) == 1\\n            ),\\n            'SafeSaviour/not-owning-safe'\\n        );\\n\\n        _;\\n    }\\n\\n    // --- Events ---\\n    event Deposit(address indexed caller, address indexed safeHandler, uint256 amount);\\n    event Withdraw(address indexed caller, uint256 indexed safeID, address indexed safeHandler, uint256 amount);\\n\\n    constructor(\\n        address _collateralJoin,\\n        address _liquidationEngine,\\n        address _oracleRelayer,\\n        address _safeManager,\\n        address _saviourRegistry,\\n        address _opynSafeSaviourOperator,\\n        uint256 _keeperPayout,\\n        uint256 _minKeeperPayoutValue,\\n        uint256 _payoutToSAFESize,\\n        uint256 _defaultDesiredCollateralizationRatio\\n    ) {\\n        require(_collateralJoin != address(0), 'OpynSafeSaviour/null-collateral-join');\\n        require(_liquidationEngine != address(0), 'OpynSafeSaviour/null-liquidation-engine');\\n        require(_oracleRelayer != address(0), 'OpynSafeSaviour/null-oracle-relayer');\\n        require(_safeManager != address(0), 'OpynSafeSaviour/null-safe-manager');\\n        require(_saviourRegistry != address(0), 'OpynSafeSaviour/null-saviour-registry');\\n        require(_opynSafeSaviourOperator != address(0), 'OpynSafeSaviour/null-opyn-safe-saviour-operator');\\n        require(_keeperPayout > 0, 'OpynSafeSaviour/invalid-keeper-payout');\\n        require(_minKeeperPayoutValue > 0, 'OpynSafeSaviour/invalid-min-payout-value');\\n        require(_payoutToSAFESize > 1, 'OpynSafeSaviour/invalid-payout-to-safe-size');\\n        require(_defaultDesiredCollateralizationRatio > 0, 'OpynSafeSaviour/null-default-cratio');\\n\\n        keeperPayout = _keeperPayout;\\n        payoutToSAFESize = _payoutToSAFESize;\\n        minKeeperPayoutValue = _minKeeperPayoutValue;\\n\\n        liquidationEngine = LiquidationEngineLike(_liquidationEngine);\\n        collateralJoin = CollateralJoinLike(_collateralJoin);\\n        oracleRelayer = OracleRelayerLike(_oracleRelayer);\\n        safeEngine = SAFEEngineLike(collateralJoin.safeEngine());\\n        safeManager = GebSafeManagerLike(_safeManager);\\n        saviourRegistry = SAFESaviourRegistryLike(_saviourRegistry);\\n        collateralToken = ERC20Like(collateralJoin.collateral());\\n        opynSafeSaviourOperator = OpynSafeSaviourOperator(_opynSafeSaviourOperator);\\n\\n        require(address(safeEngine) != address(0), 'OpynSafeSaviour/null-safe-engine');\\n\\n        uint256 scaledLiquidationRatio =\\n            oracleRelayer.liquidationCRatio(collateralJoin.collateralType()) / CRATIO_SCALE_DOWN;\\n        require(scaledLiquidationRatio > 0, 'OpynSafeSaviour/invalid-scaled-liq-ratio');\\n        require(\\n            both(\\n                _defaultDesiredCollateralizationRatio > scaledLiquidationRatio,\\n                _defaultDesiredCollateralizationRatio <= MAX_CRATIO\\n            ),\\n            'OpynSafeSaviour/invalid-default-desired-cratio'\\n        );\\n\\n        require(collateralJoin.decimals() == 18, 'OpynSafeSaviour/invalid-join-decimals');\\n        require(collateralJoin.contractEnabled() == 1, 'OpynSafeSaviour/join-disabled');\\n\\n        defaultDesiredCollateralizationRatio = _defaultDesiredCollateralizationRatio;\\n    }\\n\\n    // --- Adding/Withdrawing Cover ---\\n    /*\\n     * @notice Deposit oToken in the contract in order to provide cover for a specific SAFE controlled by the SAFE Manager\\n     * @param safeID The ID of the SAFE to protect. This ID should be registered inside GebSafeManager\\n     * @param oTokenAmount The amount of oToken to deposit\\n     * @param oTokenType the address of the erc20 contract controlling the oTokens\\n     */\\n    function deposit(\\n        uint256 _safeID,\\n        uint256 _oTokenAmount,\\n        address _oTokenType\\n    ) external liquidationEngineApproved(address(this)) controlsSAFE(msg.sender, _safeID) nonReentrant {\\n        require(_oTokenAmount > 0, 'OpynSafeSaviour/null-oToken-amount');\\n        // Check that oToken has been whitelisted by a SaviourRegistry authorized account\\n        require(opynSafeSaviourOperator.oTokenWhitelist(_oTokenType) == true, 'OpynSafeSaviour/forbidden-otoken');\\n\\n        // Check that the SAFE exists inside GebSafeManager\\n        address safeHandler = safeManager.safes(_safeID);\\n        require(safeHandler != address(0), 'OpynSafeSaviour/null-handler');\\n\\n        // Check that safe is either protected by provided oToken type or no type at all\\n        require(\\n            either(oTokenSelection[safeHandler] == _oTokenType, oTokenSelection[safeHandler] == address(0)),\\n            'OpynSafeSaviour/safe-otoken-incompatibility'\\n        );\\n\\n        // Check that the SAFE has debt\\n        (, uint256 safeDebt) =\\n            SAFEEngineLike(collateralJoin.safeEngine()).safes(collateralJoin.collateralType(), safeHandler);\\n        require(safeDebt > 0, 'OpynSafeSaviour/safe-does-not-have-debt');\\n\\n        // Trigger transfer from oToken contract\\n        require(\\n            ERC20Like(_oTokenType).transferFrom(msg.sender, address(this), _oTokenAmount),\\n            'OpynSafeSaviour/could-not-transfer-collateralToken'\\n        );\\n        // Update the collateralToken balance used to cover the SAFE and transfer collateralToken to this contract\\n        oTokenCover[safeHandler] = add(oTokenCover[safeHandler], _oTokenAmount);\\n\\n        // Check if SAFE oToken selection should be changed\\n        if (oTokenSelection[safeHandler] == address(0)) {\\n            oTokenSelection[safeHandler] = _oTokenType;\\n        }\\n\\n        emit Deposit(msg.sender, safeHandler, _oTokenAmount);\\n    }\\n\\n    /*\\n     * @notice Withdraw oToken from the contract and provide less cover for a SAFE\\n     * @dev Only an address that controls the SAFE inside GebSafeManager can call this\\n     * @param safeID The ID of the SAFE to remove cover from. This ID should be registered inside GebSafeManager\\n     * @param oTokenAmount The amount of oToken to withdraw\\n     */\\n    function withdraw(uint256 _safeID, uint256 _oTokenAmount) external controlsSAFE(msg.sender, _safeID) nonReentrant {\\n        require(_oTokenAmount > 0, 'OpynSafeSaviour/null-collateralToken-amount');\\n\\n        // Fetch the handler from the SAFE manager\\n        address safeHandler = safeManager.safes(_safeID);\\n        require(oTokenCover[safeHandler] >= _oTokenAmount, 'OpynSafeSaviour/not-enough-to-withdraw');\\n\\n        // Withdraw cover and transfer collateralToken to the caller\\n        oTokenCover[safeHandler] = sub(oTokenCover[safeHandler], _oTokenAmount);\\n        ERC20Like(oTokenSelection[safeHandler]).transfer(msg.sender, _oTokenAmount);\\n\\n        // Check if balance of selected token\\n        if (oTokenCover[safeHandler] == 0) {\\n            oTokenSelection[safeHandler] = address(0);\\n        }\\n\\n        emit Withdraw(msg.sender, _safeID, safeHandler, _oTokenAmount);\\n    }\\n\\n    // --- Adjust Cover Preferences ---\\n    /*\\n     * @notice Sets the collateralization ratio that a SAFE should have after it's saved\\n     * @dev Only an address that controls the SAFE inside GebSafeManager can call this\\n     * @param safeID The ID of the SAFE to set the desired CRatio for. This ID should be registered inside GebSafeManager\\n     * @param cRatio The collateralization ratio to set\\n     */\\n    function setDesiredCollateralizationRatio(uint256 _safeID, uint256 _cRatio)\\n        external\\n        controlsSAFE(msg.sender, _safeID)\\n    {\\n        uint256 scaledLiquidationRatio =\\n            oracleRelayer.liquidationCRatio(collateralJoin.collateralType()) / CRATIO_SCALE_DOWN;\\n        address safeHandler = safeManager.safes(_safeID);\\n\\n        require(scaledLiquidationRatio > 0, 'OpynSafeSaviour/invalid-scaled-liq-ratio');\\n        require(scaledLiquidationRatio < _cRatio, 'OpynSafeSaviour/invalid-desired-cratio');\\n        require(_cRatio <= MAX_CRATIO, 'OpynSafeSaviour/exceeds-max-cratio');\\n\\n        desiredCollateralizationRatios[collateralJoin.collateralType()][safeHandler] = _cRatio;\\n\\n        emit SetDesiredCollateralizationRatio(msg.sender, _safeID, safeHandler, _cRatio);\\n    }\\n\\n    // --- Saving Logic ---\\n    /*\\n     * @notice Saves a SAFE by adding more collateralToken into it\\n     * @dev Only the LiquidationEngine can call this\\n     * @param keeper The keeper that called LiquidationEngine.liquidateSAFE and that should be rewarded for spending gas to save a SAFE\\n     * @param collateralType The collateral type backing the SAFE that's being liquidated\\n     * @param safeHandler The handler of the SAFE that's being saved\\n     * @return Whether the SAFE has been saved, the amount of collateralToken added in the SAFE as well as the amount of\\n     *         collateralToken sent to the keeper as their payment\\n     */\\n    function saveSAFE(\\n        address _keeper,\\n        bytes32 _collateralType,\\n        address _safeHandler\\n    )\\n        external\\n        override\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        require(address(liquidationEngine) == msg.sender, 'OpynSafeSaviour/caller-not-liquidation-engine');\\n        require(_keeper != address(0), 'OpynSafeSaviour/null-keeper-address');\\n\\n        if (both(both(_collateralType == '', _safeHandler == address(0)), _keeper == address(liquidationEngine))) {\\n            return (true, MAX_UINT, MAX_UINT);\\n        }\\n\\n        require(_collateralType == collateralJoin.collateralType(), 'OpynSafeSaviour/invalid-collateral-type');\\n        require(oTokenSelection[_safeHandler] != address(0), 'OpynSafeSaviour/no-selected-otoken');\\n\\n        // Check that the fiat value of the keeper payout is high enough\\n        require(keeperPayoutExceedsMinValue(), 'OpynSafeSaviour/small-keeper-payout-value');\\n\\n        // Compute the amount of collateral that should be added to bring the safe to desired collateral ratio\\n        uint256 tokenAmountUsed = tokenAmountUsedToSave(_safeHandler);\\n\\n        {\\n            // Stack too deep guard\\n\\n            // Check that the amount of collateral locked in the safe is bigger than the keeper's payout\\n            (uint256 safeLockedCollateral, ) =\\n                SAFEEngineLike(collateralJoin.safeEngine()).safes(collateralJoin.collateralType(), _safeHandler);\\n            require(safeLockedCollateral >= mul(keeperPayout, payoutToSAFESize), 'OpynSafeSaviour/tiny-safe');\\n        }\\n\\n        // Compute and check the validity of the amount of collateralToken used to save the SAFE\\n        require(both(tokenAmountUsed != MAX_UINT, tokenAmountUsed != 0), 'OpynSafeSaviour/invalid-tokens-used-to-save');\\n\\n        // The actual required collateral to provide is the sum of what is needed to bring the safe to its desired collateral ratio + the keeper reward\\n        uint256 requiredTokenAmount = add(keeperPayout, tokenAmountUsed);\\n\\n        uint256 oTokenToApprove =\\n            opynSafeSaviourOperator.getOTokenAmountToApprove(\\n                oTokenSelection[_safeHandler],\\n                requiredTokenAmount,\\n                address(collateralToken)\\n            );\\n\\n        require(oTokenCover[_safeHandler] >= oTokenToApprove, 'OpynSafeSaviour/otoken-balance-too-low');\\n\\n        ERC20Like(oTokenSelection[_safeHandler]).approve(address(opynSafeSaviourOperator), oTokenToApprove);\\n\\n        uint256 initialAmount = collateralToken.balanceOf(address(this));\\n\\n        opynSafeSaviourOperator.redeemAndSwapOTokens(\\n            oTokenSelection[_safeHandler],\\n            oTokenToApprove,\\n            requiredTokenAmount,\\n            address(collateralToken)\\n        );\\n\\n        uint256 receivedCollateralAmount = sub(collateralToken.balanceOf(address(this)), initialAmount);\\n        oTokenCover[_safeHandler] = sub(oTokenCover[_safeHandler], oTokenToApprove);\\n\\n        // Check that balance has increased of at least required amount\\n        // This should never get triggered but is the ultimate check to ensure that the Safe Saviour Operator did its job properly\\n        require(\\n            receivedCollateralAmount >= requiredTokenAmount,\\n            'OpynSafeSaviour/not-enough-otoken-collateral-swapped'\\n        );\\n\\n        saviourRegistry.markSave(_collateralType, _safeHandler);\\n\\n        // Approve collateralToken to the collateral join contract\\n        collateralToken.approve(address(collateralJoin), 0);\\n        collateralToken.approve(address(collateralJoin), tokenAmountUsed);\\n\\n        // Join collateralToken in the system and add it in the saved SAFE\\n        collateralJoin.join(address(this), tokenAmountUsed);\\n        safeEngine.modifySAFECollateralization(\\n            collateralJoin.collateralType(),\\n            _safeHandler,\\n            address(this),\\n            address(0),\\n            int256(tokenAmountUsed),\\n            int256(0)\\n        );\\n\\n        // Send the fee to the keeper, the prize is recomputed to prevent dust\\n        collateralToken.transfer(_keeper, sub(receivedCollateralAmount, tokenAmountUsed));\\n\\n        // Emit an event\\n        emit SaveSAFE(_keeper, _collateralType, _safeHandler, tokenAmountUsed);\\n\\n        return (true, tokenAmountUsed, keeperPayout);\\n    }\\n\\n    // --- Getters ---\\n    /*\\n     * @notice Compute whether the value of keeperPayout collateralToken is higher than or equal to minKeeperPayoutValue\\n     * @dev Used to determine whether it's worth it for the keeper to save the SAFE in exchange for keeperPayout collateralToken\\n     * @return A bool representing whether the value of keeperPayout collateralToken is >= minKeeperPayoutValue\\n     */\\n    function keeperPayoutExceedsMinValue() public view override returns (bool) {\\n        (address ethFSM, , ) = oracleRelayer.collateralTypes(collateralJoin.collateralType());\\n        (uint256 priceFeedValue, bool hasValidValue) =\\n            PriceFeedLike(PriceFeedLike(ethFSM).priceSource()).getResultWithValidity();\\n\\n        if (either(!hasValidValue, priceFeedValue == 0)) {\\n            return false;\\n        }\\n\\n        return (minKeeperPayoutValue <= mul(keeperPayout, priceFeedValue) / WAD);\\n    }\\n\\n    /*\\n     * @notice Return the current value of the keeper payout\\n     */\\n    function getKeeperPayoutValue() public view override returns (uint256) {\\n        (address ethFSM, , ) = oracleRelayer.collateralTypes(collateralJoin.collateralType());\\n        (uint256 priceFeedValue, bool hasValidValue) =\\n            PriceFeedLike(PriceFeedLike(ethFSM).priceSource()).getResultWithValidity();\\n\\n        if (either(!hasValidValue, priceFeedValue == 0)) {\\n            return 0;\\n        }\\n\\n        return mul(keeperPayout, priceFeedValue) / WAD;\\n    }\\n\\n    /*\\n     * @notice Determine whether a SAFE can be saved with the current amount of collateralToken deposited as cover for it\\n     * @param safeHandler The handler of the SAFE which the function takes into account\\n     * @return Whether the SAFE can be saved or not\\n     */\\n    function canSave(address _safeHandler) external override returns (bool) {\\n        uint256 tokenAmountUsed = tokenAmountUsedToSave(_safeHandler);\\n\\n        if (tokenAmountUsed == MAX_UINT) {\\n            return false;\\n        }\\n\\n        // Check if oToken balance is not empty\\n        if (oTokenCover[_safeHandler] == 0) {\\n            return false;\\n        }\\n\\n        // Check that the fiat value of the keeper payout is high enough\\n        if (keeperPayoutExceedsMinValue() == false) {\\n            return false;\\n        }\\n\\n        // check if safe too small to be saved\\n        (uint256 safeLockedCollateral, ) =\\n            SAFEEngineLike(collateralJoin.safeEngine()).safes(collateralJoin.collateralType(), _safeHandler);\\n        if (safeLockedCollateral < mul(keeperPayout, payoutToSAFESize)) {\\n            return false;\\n        }\\n\\n        uint256 oTokenToApprove =\\n            opynSafeSaviourOperator.getOTokenAmountToApprove(\\n                oTokenSelection[_safeHandler],\\n                add(tokenAmountUsed, keeperPayout),\\n                address(collateralToken)\\n            );\\n\\n        // Check that owned oTokens are able to redeem enough collateral to save SAFE\\n        return (oTokenToApprove <= oTokenCover[_safeHandler]);\\n    }\\n\\n    /*\\n     * @notice Calculate the amount of collateralToken used to save a SAFE and bring its CRatio to the desired level\\n     * @param safeHandler The handler of the SAFE which the function takes into account\\n     * @return The amount of collateralToken used to save the SAFE and bring its CRatio to the desired level\\n     */\\n    function tokenAmountUsedToSave(address _safeHandler) public override returns (uint256 tokenAmountUsed) {\\n        (uint256 depositedcollateralToken, uint256 safeDebt) =\\n            SAFEEngineLike(collateralJoin.safeEngine()).safes(collateralJoin.collateralType(), _safeHandler);\\n        (address ethFSM, , ) = oracleRelayer.collateralTypes(collateralJoin.collateralType());\\n        (uint256 priceFeedValue, bool hasValidValue) = PriceFeedLike(ethFSM).getResultWithValidity();\\n\\n        // If the SAFE doesn't have debt or if the price feed is faulty, abort\\n        if (either(safeDebt == 0, either(priceFeedValue == 0, !hasValidValue))) {\\n            tokenAmountUsed = MAX_UINT;\\n            return tokenAmountUsed;\\n        }\\n\\n        // Calculate the value of the debt equivalent to the value of the collateralToken that would need to be in the SAFE after it's saved\\n        uint256 targetCRatio =\\n            (desiredCollateralizationRatios[collateralJoin.collateralType()][_safeHandler] == 0)\\n                ? defaultDesiredCollateralizationRatio\\n                : desiredCollateralizationRatios[collateralJoin.collateralType()][_safeHandler];\\n        uint256 scaledDownDebtValue =\\n            mul(add(mul(oracleRelayer.redemptionPrice(), safeDebt) / RAY, ONE), targetCRatio) / HUNDRED;\\n\\n        // Compute the amount of collateralToken the SAFE needs to get to the desired CRatio\\n        uint256 collateralTokenAmountNeeded = mul(scaledDownDebtValue, WAD) / priceFeedValue;\\n\\n        // If the amount of collateralToken needed is lower than the amount that's currently in the SAFE, return 0\\n        if (collateralTokenAmountNeeded <= depositedcollateralToken) {\\n            return 0;\\n        } else {\\n            // Otherwise return the delta\\n            return sub(collateralTokenAmountNeeded, depositedcollateralToken);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x72a72f2d11c15d1f2a42f6a8554566f540f313f724cc69bb4b722dc2972af634\",\"license\":\"MIT\"},\"contracts/saviours/OpynSafeSaviourOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '../interfaces/OpynV2OTokenLike.sol';\\nimport '../interfaces/OpynV2ControllerLike.sol';\\nimport '../interfaces/OpynV2WhitelistLike.sol';\\nimport '../interfaces/UniswapV2Router02Like.sol';\\nimport '../interfaces/SAFESaviourRegistryLike.sol';\\nimport '../interfaces/ERC20Like.sol';\\nimport '../math/SafeMath.sol';\\n\\ncontract OpynSafeSaviourOperator is SafeMath {\\n    // The Opyn v2 Controller to interact with oTokens\\n    OpynV2ControllerLike public opynV2Controller;\\n    // The Opyn v2 Whitelist to check oTokens' validity\\n    OpynV2WhitelistLike public opynV2Whitelist;\\n    // The Uniswap v2 router 02 to swap collaterals\\n    UniswapV2Router02Like public uniswapV2Router02;\\n    // oToken type selected by each SAFE\\n    mapping(address => address) public oTokenSelection;\\n    // Entity whitelisting allowed saviours\\n    SAFESaviourRegistryLike public saviourRegistry;\\n\\n    // Events\\n    event ToggleOToken(address oToken, uint256 whitelistState);\\n\\n    constructor(\\n        address opynV2Controller_,\\n        address opynV2Whitelist_,\\n        address uniswapV2Router02_,\\n        address saviourRegistry_\\n    ) {\\n        require(opynV2Controller_ != address(0), 'OpynSafeSaviour/null-opyn-v2-controller');\\n        require(opynV2Whitelist_ != address(0), 'OpynSafeSaviour/null-opyn-v2-whitelist');\\n        require(uniswapV2Router02_ != address(0), 'OpynSafeSaviour/null-uniswap-v2-router02');\\n        require(saviourRegistry_ != address(0), 'OpynSafeSaviour/null-saviour-registry');\\n\\n        opynV2Controller = OpynV2ControllerLike(opynV2Controller_);\\n        opynV2Whitelist = OpynV2WhitelistLike(opynV2Whitelist_);\\n        uniswapV2Router02 = UniswapV2Router02Like(uniswapV2Router02_);\\n        saviourRegistry = SAFESaviourRegistryLike(saviourRegistry_);\\n    }\\n\\n    function isOTokenPutOption(address _otoken) external view returns (bool) {\\n        (, , , , , bool isPut) = OpynV2OTokenLike(_otoken).getOtokenDetails();\\n        return isPut;\\n    }\\n\\n    function getOpynPayout(address _otoken, uint256 _amount) external view returns (uint256) {\\n        return opynV2Controller.getPayout(_otoken, _amount);\\n    }\\n\\n    modifier isSaviourRegistryAuthorized() {\\n        require(saviourRegistry.authorizedAccounts(msg.sender) == 1, 'OpynSafeSaviour/account-not-authorized');\\n        _;\\n    }\\n\\n    function redeemAndSwapOTokens(\\n        address _otoken,\\n        uint256 _amountIn,\\n        uint256 _amountOut,\\n        address _safeCollateral\\n    ) external {\\n        ERC20Like(_otoken).transferFrom(msg.sender, address(this), _amountIn);\\n\\n        (address oTokenCollateral, , , , , ) = OpynV2OTokenLike(_otoken).getOtokenDetails();\\n\\n        uint256 redeemedOTokenCollateral;\\n\\n        {\\n            // Opyn Redeem\\n\\n            uint256 preRedeemBalance = ERC20Like(oTokenCollateral).balanceOf(address(this));\\n\\n            // Build Opyn Action\\n            ActionArgs[] memory redeemAction = new ActionArgs[](1);\\n            redeemAction[0].actionType = ActionType.Redeem;\\n            redeemAction[0].owner = address(0);\\n            redeemAction[0].secondAddress = address(this);\\n            redeemAction[0].asset = _otoken;\\n            redeemAction[0].vaultId = 0;\\n            redeemAction[0].amount = _amountIn;\\n\\n            // Trigger oToken collateral redeem\\n            opynV2Controller.operate(redeemAction);\\n\\n            redeemedOTokenCollateral = sub(ERC20Like(oTokenCollateral).balanceOf(address(this)), preRedeemBalance);\\n        }\\n\\n        uint256 swappedSafeCollateral;\\n\\n        {\\n            // Uniswap swap\\n\\n            // Retrieve pre-swap WETH balance\\n            uint256 safeCollateralBalance = ERC20Like(_safeCollateral).balanceOf(address(this));\\n\\n            // Path argument for the uniswap router\\n            address[] memory path = new address[](2);\\n            path[0] = oTokenCollateral;\\n            path[1] = _safeCollateral;\\n\\n            ERC20Like(oTokenCollateral).approve(address(uniswapV2Router02), redeemedOTokenCollateral);\\n\\n            uniswapV2Router02.swapExactTokensForTokens(\\n                redeemedOTokenCollateral,\\n                _amountOut,\\n                path,\\n                address(this),\\n                block.timestamp\\n            );\\n\\n            // Retrieve post-swap WETH balance. Would overflow and throw if balance decreased\\n            swappedSafeCollateral = sub(ERC20Like(_safeCollateral).balanceOf(address(this)), safeCollateralBalance);\\n        }\\n\\n        ERC20Like(_safeCollateral).transfer(msg.sender, swappedSafeCollateral);\\n    }\\n\\n    function oTokenWhitelist(address _otoken) external view returns (bool) {\\n        return opynV2Whitelist.isWhitelistedOtoken(_otoken);\\n    }\\n\\n    function getOTokenAmountToApprove(\\n        address _otoken,\\n        uint256 _requiredOutputAmount,\\n        address _safeCollateralAddress\\n    ) external view returns (uint256) {\\n        (address oTokenCollateralAddress, , , , , ) = OpynV2OTokenLike(_otoken).getOtokenDetails();\\n\\n        address[] memory path = new address[](2);\\n        path[0] = oTokenCollateralAddress;\\n        path[1] = _safeCollateralAddress;\\n\\n        uint256 oTokenCollateralAmountRequired = uniswapV2Router02.getAmountsIn(_requiredOutputAmount, path)[0];\\n\\n        uint256 payoutPerToken = opynV2Controller.getPayout(_otoken, 1);\\n\\n        require(payoutPerToken > 0, 'OpynSafeSaviour/no-collateral-to-redeem');\\n\\n        uint256 amountToApprove = div(oTokenCollateralAmountRequired, payoutPerToken);\\n\\n        // Integer division rounds to zero, better ensure we get at least the required amount\\n        if (mul(amountToApprove, payoutPerToken) < _requiredOutputAmount) {\\n            amountToApprove += 1;\\n        }\\n\\n        return amountToApprove;\\n    }\\n}\\n\",\"keccak256\":\"0xe749b3af350b0911702cfddfdde63f5af24844c6e92ff0331c10d8dee47f04d2\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, 'ReentrancyGuard: reentrant call');\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x03db6d2ade72c3ccb72bde1d0ae3de99f55ea5fe14181ba6d8ee5df31148f5bf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162003d4438038062003d4483398181016040526101408110156200003857600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e0880151610100890151610120909901516001600055979896979596949593949293919290916001600160a01b038a16620000c75760405162461bcd60e51b815260040180806020018281038252602481526020018062003c546024913960400191505060405180910390fd5b6001600160a01b0389166200010e5760405162461bcd60e51b815260040180806020018281038252602781526020018062003d1d6027913960400191505060405180910390fd5b6001600160a01b038816620001555760405162461bcd60e51b815260040180806020018281038252602381526020018062003c786023913960400191505060405180910390fd5b6001600160a01b0387166200019c5760405162461bcd60e51b815260040180806020018281038252602181526020018062003b986021913960400191505060405180910390fd5b6001600160a01b038616620001e35760405162461bcd60e51b815260040180806020018281038252602581526020018062003c2f6025913960400191505060405180910390fd5b6001600160a01b0385166200022a5760405162461bcd60e51b815260040180806020018281038252602f81526020018062003cee602f913960400191505060405180910390fd5b600084116200026b5760405162461bcd60e51b815260040180806020018281038252602581526020018062003b736025913960400191505060405180910390fd5b60008311620002ac5760405162461bcd60e51b815260040180806020018281038252602881526020018062003c076028913960400191505060405180910390fd5b60018211620002ed5760405162461bcd60e51b815260040180806020018281038252602b81526020018062003bdc602b913960400191505060405180910390fd5b600081116200032e5760405162461bcd60e51b815260040180806020018281038252602381526020018062003bb96023913960400191505060405180910390fd5b600684905560088290556007839055600180546001600160a01b03808c166001600160a01b031992831617909255600d80548d84169083161790819055600280548c8516931692909217909155604080516367aea31360e01b8152905191909216916367aea313916004828101926020929190829003018186803b158015620003b657600080fd5b505afa158015620003cb573d6000803e3d6000fd5b505050506040513d6020811015620003e257600080fd5b5051600480546001600160a01b03199081166001600160a01b039384161782556003805482168b851617905560058054909116898416179055600d546040805163d8dfeb4560e01b81529051919093169263d8dfeb459281810192602092909190829003018186803b1580156200045857600080fd5b505afa1580156200046d573d6000803e3d6000fd5b505050506040513d60208110156200048457600080fd5b5051600e80546001600160a01b03199081166001600160a01b0393841617909155600f80549091168783161790556004541662000508576040805162461bcd60e51b815260206004820181905260248201527f4f70796e53616665536176696f75722f6e756c6c2d736166652d656e67696e65604482015290519081900360640190fd5b600254600d546040805163e824600f60e01b815290516000936a084595161401484a000000936001600160a01b03918216936375502d3c93919092169163e824600f916004808301926020929190829003018186803b1580156200056b57600080fd5b505afa15801562000580573d6000803e3d6000fd5b505050506040513d60208110156200059757600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b158015620005d757600080fd5b505afa158015620005ec573d6000803e3d6000fd5b505050506040513d60208110156200060357600080fd5b5051816200060d57fe5b04905060008111620006515760405162461bcd60e51b815260040180806020018281038252602881526020018062003b4b6028913960400191505060405180910390fd5b620006648183116103e884111562000844565b620006a15760405162461bcd60e51b815260040180806020018281038252602e81526020018062003c9b602e913960400191505060405180910390fd5b600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015620006f057600080fd5b505afa15801562000705573d6000803e3d6000fd5b505050506040513d60208110156200071c57600080fd5b50516012146200075e5760405162461bcd60e51b815260040180806020018281038252602581526020018062003cc96025913960400191505060405180910390fd5b600d60009054906101000a90046001600160a01b03166001600160a01b03166341b3a0d96040518163ffffffff1660e01b815260040160206040518083038186803b158015620007ad57600080fd5b505afa158015620007c2573d6000803e3d6000fd5b505050506040513d6020811015620007d957600080fd5b505160011462000830576040805162461bcd60e51b815260206004820152601d60248201527f4f70796e53616665536176696f75722f6a6f696e2d64697361626c6564000000604482015290519081900360640190fd5b506009555062000848975050505050505050565b1690565b6132f380620008586000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806386426af41161010f578063c2ee3a08116100a2578063e5b5019a11610071578063e5b5019a1461045b578063ee236f2014610463578063f364e1801461046b578063f85fc0ab14610473576101f0565b8063c2ee3a081461041d578063d14d60d614610425578063d951e15a1461044b578063e2c0f58d14610453576101f0565b8063b2016bd4116100de578063b2016bd41461036d578063b5a8689414610375578063b9b0bb39146103a1578063bb287baf146103f7576101f0565b806386426af4146103235780638dbdbe6d1461032b5780638f7e43e81461035d578063aca542d914610365576101f0565b806356b7661e116101875780636a146024116101565780636a146024146102d257806374db5962146102da57806383d35fc5146102fd578063851cad901461029a576101f0565b806356b7661e146102b257806357c90441146102ba5780635bfd62a6146102c257806367aea313146102ca576101f0565b806344bf3c72116101c357806344bf3c72146102925780634b4d66871461029a5780634faf61ab146102a2578063552033c4146102aa576101f0565b8063097ab423146101f55780632f4bab6d146102375780634094a2fa14610251578063441a3e701461026d575b600080fd5b61021b6004803603602081101561020b57600080fd5b50356001600160a01b031661047b565b604080516001600160a01b039092168252519081900360200190f35b61023f610496565b60408051918252519081900360200190f35b61025961049c565b604080519115158252519081900360200190f35b6102906004803603604081101561028357600080fd5b50803590602001356106bc565b005b61021b610b9a565b61023f610ba9565b61021b610baf565b61023f610bbe565b61023f610bce565b61021b610bd4565b61023f610be3565b61021b610be9565b61023f610bf8565b610290600480360360408110156102f057600080fd5b5080359060200135610c04565b6102596004803603602081101561031357600080fd5b50356001600160a01b0316611014565b61023f6112d7565b6102906004803603606081101561034157600080fd5b50803590602081013590604001356001600160a01b03166112df565b61023f611a4f565b61023f611a55565b61021b611a64565b61023f6004803603604081101561038b57600080fd5b50803590602001356001600160a01b0316611a73565b6103d7600480360360608110156103b757600080fd5b506001600160a01b03813581169160208101359160409091013516611a90565b604080519315158452602084019290925282820152519081900360600190f35b61023f6004803603602081101561040d57600080fd5b50356001600160a01b031661264f565b61023f612661565b61023f6004803603602081101561043b57600080fd5b50356001600160a01b0316612666565b61021b612bd1565b61021b612be0565b61023f612bef565b61023f612bf5565b61021b612e0f565b61023f612e1e565b600c602052600090815260409020546001600160a01b031681565b60095481565b600254600d546040805163e824600f60e01b8152905160009384936001600160a01b039182169363d07900bb93919092169163e824600f916004808301926020929190829003018186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d602081101561051d57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926060929190829003018186803b15801561055c57600080fd5b505afa158015610570573d6000803e3d6000fd5b505050506040513d606081101561058657600080fd5b5051604080516320531bc960e01b8152905191925060009182916001600160a01b038516916320531bc991600480820192602092909190829003018186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d60208110156105fb57600080fd5b5051604080516309fa15b560e31b815281516001600160a01b0390931692634fd0ada892600480840193919291829003018186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d604081101561066657600080fd5b508051602090910151909250905061068081158315612e23565b1561069157600093505050506106b9565b670de0b6b3a76400006106a660065484612e27565b816106ad57fe5b04600754111593505050505b90565b338281610709576040805162461bcd60e51b815260206004820152601660248201527529b0b332a9b0bb34b7bab917b73ab63616b7bbb732b960511b604482015290519081900360640190fd5b600354604080516351526bb760e11b8152600481018490529051610892926001600160a01b03169163a2a4d76e916024808301926020929190829003018186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d602081101561078057600080fd5b5051600354604080516351526bb760e11b81526004810186905290516001600160a01b03938416878516149390921691634fa053b191839163a2a4d76e91602480820192602092909190829003018186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d602081101561080857600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039283166004820152602481018890529188166044830152516064808301926020929190829003018186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d602081101561088857600080fd5b5051600114612e23565b6108e3576040805162461bcd60e51b815260206004820152601b60248201527f53616665536176696f75722f6e6f742d6f776e696e672d736166650000000000604482015290519081900360640190fd5b6002600054141561093b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000558261097c5760405162461bcd60e51b815260040180806020018281038252602b81526020018061312f602b913960400191505060405180910390fd5b6003546040805163434efcbd60e01b81526004810187905290516000926001600160a01b03169163434efcbd916024808301926020929190829003018186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d60208110156109f257600080fd5b50516001600160a01b0381166000908152600b6020526040902054909150841115610a4e5760405162461bcd60e51b81526004018080602001828103825260268152602001806132666026913960400191505060405180910390fd5b6001600160a01b0381166000908152600b6020526040902054610a719085612e89565b6001600160a01b038083166000908152600b6020908152604080832094909455600c815283822054845163a9059cbb60e01b8152336004820152602481018a9052945193169363a9059cbb9360448083019491928390030190829087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b505050506040513d6020811015610b0557600080fd5b50506001600160a01b0381166000908152600b6020526040902054610b4b576001600160a01b0381166000908152600c6020526040902080546001600160a01b03191690555b6040805185815290516001600160a01b03831691879133917f457f950b75085c30ff780acd57bde642ff1316cc4aad9f286af2c1ffc4163a78919081900360200190a450506001600055505050565b6001546001600160a01b031681565b6103e881565b6002546001600160a01b031681565b6b033b2e3c9fd0803ce800000081565b60085481565b6003546001600160a01b031681565b60075481565b6004546001600160a01b031681565b670de0b6b3a764000081565b338281610c51576040805162461bcd60e51b815260206004820152601660248201527529b0b332a9b0bb34b7bab917b73ab63616b7bbb732b960511b604482015290519081900360640190fd5b600354604080516351526bb760e11b8152600481018490529051610c9e926001600160a01b03169163a2a4d76e916024808301926020929190829003018186803b15801561075657600080fd5b610cef576040805162461bcd60e51b815260206004820152601b60248201527f53616665536176696f75722f6e6f742d6f776e696e672d736166650000000000604482015290519081900360640190fd5b600254600d546040805163e824600f60e01b815290516000936a084595161401484a000000936001600160a01b03918216936375502d3c93919092169163e824600f916004808301926020929190829003018186803b158015610d5157600080fd5b505afa158015610d65573d6000803e3d6000fd5b505050506040513d6020811015610d7b57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d6020811015610de457600080fd5b505181610ded57fe5b6003546040805163434efcbd60e01b8152600481018a905290519390920493506000926001600160a01b039091169163434efcbd916024808301926020929190829003018186803b158015610e4157600080fd5b505afa158015610e55573d6000803e3d6000fd5b505050506040513d6020811015610e6b57600080fd5b5051905081610eab5760405162461bcd60e51b8152600401808060200182810382526028815260200180612fc16028913960400191505060405180910390fd5b848210610ee95760405162461bcd60e51b81526004018080602001828103825260268152602001806131096026913960400191505060405180910390fd5b6103e8851115610f2a5760405162461bcd60e51b81526004018080602001828103825260228152602001806130166022913960400191505060405180910390fd5b84600a6000600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d6020811015610fa757600080fd5b50518152602081810192909252604090810160009081206001600160a01b038616808352908452908290209390935580518881529051899233927ff3e2ede39d07e1a6e23c2557ac40ad8b94b311a0515c0ef868c62aab07ea89e2929081900390910190a4505050505050565b60008061102083612666565b90506000198114156110365760009150506112d2565b6001600160a01b0383166000908152600b602052604090205461105d5760009150506112d2565b61106561049c565b6110735760009150506112d2565b600d54604080516367aea31360e01b815290516000926001600160a01b0316916367aea313916004808301926020929190829003018186803b1580156110b857600080fd5b505afa1580156110cc573d6000803e3d6000fd5b505050506040513d60208110156110e257600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d602081101561115a57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b03881660248301528051604480840193829003018186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d60408110156111ce57600080fd5b50516006546008549192506111e291612e27565b8110156111f4576000925050506112d2565b600f546001600160a01b038581166000908152600c6020526040812054600654919383169263d8af50649291169061122d908790612ecb565b600e54604080516001600160e01b031960e087901b1681526001600160a01b03948516600482015260248101939093529216604482015290516064808301926020929190829003018186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d60208110156112af57600080fd5b50516001600160a01b0386166000908152600b6020526040902054101593505050505b919050565b633b9aca0081565b60015460408051631589b68960e21b81523060048201819052915191926001600160a01b031691635626da2491602480820192602092909190829003018186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d602081101561135657600080fd5b50516001146113965760405162461bcd60e51b815260040180806020018281038252602e8152602001806131f0602e913960400191505060405180910390fd5b3384816113e3576040805162461bcd60e51b815260206004820152601660248201527529b0b332a9b0bb34b7bab917b73ab63616b7bbb732b960511b604482015290519081900360640190fd5b600354604080516351526bb760e11b8152600481018490529051611430926001600160a01b03169163a2a4d76e916024808301926020929190829003018186803b15801561075657600080fd5b611481576040805162461bcd60e51b815260206004820152601b60248201527f53616665536176696f75722f6e6f742d6f776e696e672d736166650000000000604482015290519081900360640190fd5b600260005414156114d9576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000558461151a5760405162461bcd60e51b815260040180806020018281038252602281526020018061308a6022913960400191505060405180910390fd5b600f5460408051633a7685eb60e01b81526001600160a01b03878116600483015291519190921691633a7685eb916024808301926020929190829003018186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d602081101561159157600080fd5b505115156001146115e9576040805162461bcd60e51b815260206004820181905260248201527f4f70796e53616665536176696f75722f666f7262696464656e2d6f746f6b656e604482015290519081900360640190fd5b6003546040805163434efcbd60e01b81526004810189905290516000926001600160a01b03169163434efcbd916024808301926020929190829003018186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d602081101561165f57600080fd5b505190506001600160a01b0381166116be576040805162461bcd60e51b815260206004820152601c60248201527f4f70796e53616665536176696f75722f6e756c6c2d68616e646c657200000000604482015290519081900360640190fd5b6001600160a01b038181166000908152600c60205260409020546116eb9190811690871681149015612e23565b6117265760405162461bcd60e51b815260040180806020018281038252602b81526020018061305f602b913960400191505060405180910390fd5b600d54604080516367aea31360e01b815290516000926001600160a01b0316916367aea313916004808301926020929190829003018186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b505050506040513d602081101561179557600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d602081101561180d57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b03861660248301528051604480840193829003018186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d604081101561188157600080fd5b50602001519050806118c45760405162461bcd60e51b81526004018080602001828103825260278152602001806130386027913960400191505060405180910390fd5b604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b038816916323b872dd9160648083019260209291908290030181600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b505050506040513d602081101561194357600080fd5b50516119805760405162461bcd60e51b815260040180806020018281038252603281526020018061328c6032913960400191505060405180910390fd5b6001600160a01b0382166000908152600b60205260409020546119a39088612ecb565b6001600160a01b038084166000908152600b6020908152604080832094909455600c9052919091205416611a00576001600160a01b038281166000908152600c6020526040902080546001600160a01b0319169188169190911790555b6040805188815290516001600160a01b0384169133917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629181900360200190a350506001600055505050505050565b60065481565b6a084595161401484a00000081565b600e546001600160a01b031681565b600a60209081526000928352604080842090915290825290205481565b600154600090819081906001600160a01b03163314611ae05760405162461bcd60e51b815260040180806020018281038252602d815260200180612fe9602d913960400191505060405180910390fd5b6001600160a01b038616611b255760405162461bcd60e51b81526004018080602001828103825260238152602001806131a26023913960400191505060405180910390fd5b611b53611b3d86156001600160a01b03871615612f25565b6001546001600160a01b03898116911614612f25565b15611b68575060019150600019905080612646565b600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb657600080fd5b505afa158015611bca573d6000803e3d6000fd5b505050506040513d6020811015611be057600080fd5b50518514611c1f5760405162461bcd60e51b815260040180806020018281038252602781526020018061315a6027913960400191505060405180910390fd5b6001600160a01b038481166000908152600c602052604090205416611c755760405162461bcd60e51b815260040180806020018281038252602281526020018061321e6022913960400191505060405180910390fd5b611c7d61049c565b611cb85760405162461bcd60e51b81526004018080602001828103825260298152602001806130ac6029913960400191505060405180910390fd5b6000611cc385612666565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166367aea3136040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1557600080fd5b505afa158015611d29573d6000803e3d6000fd5b505050506040513d6020811015611d3f57600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b158015611d8d57600080fd5b505afa158015611da1573d6000803e3d6000fd5b505050506040513d6020811015611db757600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b038a1660248301528051604480840193829003018186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d6040811015611e2b57600080fd5b5051600654600854919250611e3f91612e27565b811015611e93576040805162461bcd60e51b815260206004820152601960248201527f4f70796e53616665536176696f75722f74696e792d7361666500000000000000604482015290519081900360640190fd5b50611ea5600019821415821515612f25565b611ee05760405162461bcd60e51b815260040180806020018281038252602b8152602001806131c5602b913960400191505060405180910390fd5b6000611eee60065483612ecb565b600f546001600160a01b038881166000908152600c6020908152604080832054600e54825163362bd41960e21b81529186166004830152602482018890528516604482015290519596509194929093169263d8af506492606480840193829003018186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d6020811015611f8957600080fd5b50516001600160a01b0388166000908152600b6020526040902054909150811115611fe55760405162461bcd60e51b81526004018080602001828103825260268152602001806132406026913960400191505060405180910390fd5b6001600160a01b038088166000908152600c6020908152604080832054600f54825163095ea7b360e01b8152908616600482015260248101879052915194169363095ea7b393604480840194938390030190829087803b15801561204857600080fd5b505af115801561205c573d6000803e3d6000fd5b505050506040513d602081101561207257600080fd5b5050600e54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a0823191602480830192602092919082900301818787803b1580156120c057600080fd5b505af11580156120d4573d6000803e3d6000fd5b505050506040513d60208110156120ea57600080fd5b5051600f546001600160a01b038a81166000908152600c602052604080822054600e54825163aea1a4a760e01b8152918516600483015260248201899052604482018a9052841660648201529051949550919092169263aea1a4a79260848084019391929182900301818387803b15801561216457600080fd5b505af1158015612178573d6000803e3d6000fd5b5050600e54604080516370a0823160e01b815230600482015290516000945061220193506001600160a01b03909216916370a082319160248082019260209290919082900301818887803b1580156121cf57600080fd5b505af11580156121e3573d6000803e3d6000fd5b505050506040513d60208110156121f957600080fd5b505183612e89565b6001600160a01b038a166000908152600b60205260409020549091506122279084612e89565b6001600160a01b038a166000908152600b60205260409020558381101561227f5760405162461bcd60e51b81526004018080602001828103825260348152602001806130d56034913960400191505060405180910390fd5b60055460408051634b6973a160e11b8152600481018d90526001600160a01b038c81166024830152915191909216916396d2e74291604480830192600092919082900301818387803b1580156122d457600080fd5b505af11580156122e8573d6000803e3d6000fd5b5050600e54600d546040805163095ea7b360e01b81526001600160a01b039283166004820152600060248201819052915192909316945063095ea7b39350604480840193602093929083900390910190829087803b15801561234957600080fd5b505af115801561235d573d6000803e3d6000fd5b505050506040513d602081101561237357600080fd5b5050600e54600d546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018990529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156123ce57600080fd5b505af11580156123e2573d6000803e3d6000fd5b505050506040513d60208110156123f857600080fd5b5050600d5460408051633b4da69f60e01b81523060048201526024810188905290516001600160a01b0390921691633b4da69f9160448082019260009290919082900301818387803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b505060048054600d546040805163e824600f60e01b815290516001600160a01b0393841696506399bec3159550929091169263e824600f928282019260209290829003018186803b1580156124b557600080fd5b505afa1580156124c9573d6000803e3d6000fd5b505050506040513d60208110156124df57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b038d166024830152306044830152600060648301819052608483018a905260a48301819052905160c48084019382900301818387803b15801561254757600080fd5b505af115801561255b573d6000803e3d6000fd5b5050600e546001600160a01b0316915063a9059cbb90508c61257d8489612e89565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156125c357600080fd5b505af11580156125d7573d6000803e3d6000fd5b505050506040513d60208110156125ed57600080fd5b50506040805186815290516001600160a01b03808c16928d92918f16917f10a18796c8582ce78a5fd5fac9222c8ee18b16bd1523926d8803567527aac3609181900360200190a460018560065497509750975050505050505b93509350939050565b600b6020526000908152604090205481565b600181565b6000806000600d60009054906101000a90046001600160a01b03166001600160a01b03166367aea3136040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b957600080fd5b505afa1580156126cd573d6000803e3d6000fd5b505050506040513d60208110156126e357600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b15801561273157600080fd5b505afa158015612745573d6000803e3d6000fd5b505050506040513d602081101561275b57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b03881660248301528051604480840193829003018186803b1580156127a557600080fd5b505afa1580156127b9573d6000803e3d6000fd5b505050506040513d60408110156127cf57600080fd5b508051602091820151600254600d546040805163e824600f60e01b815290519497509295506000946001600160a01b039283169463d07900bb94939092169263e824600f9260048083019392829003018186803b15801561282f57600080fd5b505afa158015612843573d6000803e3d6000fd5b505050506040513d602081101561285957600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926060929190829003018186803b15801561289857600080fd5b505afa1580156128ac573d6000803e3d6000fd5b505050506040513d60608110156128c257600080fd5b5051604080516309fa15b560e31b8152815192935060009283926001600160a01b03861692634fd0ada89260048083019392829003018186803b15801561290857600080fd5b505afa15801561291c573d6000803e3d6000fd5b505050506040513d604081101561293257600080fd5b5080516020909101519092509050612956841561295184158415612e23565b612e23565b1561296a57600019955050505050506112d2565b6000600a6000600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129be57600080fd5b505afa1580156129d2573d6000803e3d6000fd5b505050506040513d60208110156129e857600080fd5b50518152602081810192909252604090810160009081206001600160a01b038c16825290925290205415612ac057600a6000600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a6857600080fd5b505afa158015612a7c573d6000803e3d6000fd5b505050506040513d6020811015612a9257600080fd5b50518152602081810192909252604090810160009081206001600160a01b038c168252909252902054612ac4565b6009545b905060006064612b77612b716b033b2e3c9fd0803ce8000000612b62600260009054906101000a90046001600160a01b03166001600160a01b031663c5b748c06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612b3057600080fd5b505af1158015612b44573d6000803e3d6000fd5b505050506040513d6020811015612b5a57600080fd5b50518b612e27565b81612b6957fe5b046001612ecb565b84612e27565b81612b7e57fe5b049050600084612b9683670de0b6b3a7640000612e27565b81612b9d57fe5b049050878111612bb8576000985050505050505050506112d2565b612bc28189612e89565b985050505050505050506112d2565b6005546001600160a01b031681565b600f546001600160a01b031681565b60001981565b600254600d546040805163e824600f60e01b8152905160009384936001600160a01b039182169363d07900bb93919092169163e824600f916004808301926020929190829003018186803b158015612c4c57600080fd5b505afa158015612c60573d6000803e3d6000fd5b505050506040513d6020811015612c7657600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926060929190829003018186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d6060811015612cdf57600080fd5b5051604080516320531bc960e01b8152905191925060009182916001600160a01b038516916320531bc991600480820192602092909190829003018186803b158015612d2a57600080fd5b505afa158015612d3e573d6000803e3d6000fd5b505050506040513d6020811015612d5457600080fd5b5051604080516309fa15b560e31b815281516001600160a01b0390931692634fd0ada892600480840193919291829003018186803b158015612d9557600080fd5b505afa158015612da9573d6000803e3d6000fd5b505050506040513d6040811015612dbf57600080fd5b5080516020909101519092509050612dd981158315612e23565b15612dea57600093505050506106b9565b670de0b6b3a7640000612dff60065484612e27565b81612e0657fe5b04935050505090565b600d546001600160a01b031681565b606481565b1790565b600082612e3657506000612e83565b82820282848281612e4357fe5b0414612e805760405162461bcd60e51b81526004018080602001828103825260218152602001806131816021913960400191505060405180910390fd5b90505b92915050565b6000612e8083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f29565b600082820183811015612e80576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b1690565b60008184841115612fb85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f7d578181015183820152602001612f65565b50505050905090810190601f168015612faa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f70796e53616665536176696f75722f696e76616c69642d7363616c65642d6c69712d726174696f4f70796e53616665536176696f75722f63616c6c65722d6e6f742d6c69717569646174696f6e2d656e67696e654f70796e53616665536176696f75722f657863656564732d6d61782d63726174696f4f70796e53616665536176696f75722f736166652d646f65732d6e6f742d686176652d646562744f70796e53616665536176696f75722f736166652d6f746f6b656e2d696e636f6d7061746962696c6974794f70796e53616665536176696f75722f6e756c6c2d6f546f6b656e2d616d6f756e744f70796e53616665536176696f75722f736d616c6c2d6b65657065722d7061796f75742d76616c75654f70796e53616665536176696f75722f6e6f742d656e6f7567682d6f746f6b656e2d636f6c6c61746572616c2d737761707065644f70796e53616665536176696f75722f696e76616c69642d646573697265642d63726174696f4f70796e53616665536176696f75722f6e756c6c2d636f6c6c61746572616c546f6b656e2d616d6f756e744f70796e53616665536176696f75722f696e76616c69642d636f6c6c61746572616c2d74797065536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f70796e53616665536176696f75722f6e756c6c2d6b65657065722d616464726573734f70796e53616665536176696f75722f696e76616c69642d746f6b656e732d757365642d746f2d7361766553616665536176696f75722f6e6f742d617070726f7665642d696e2d6c69717569646174696f6e2d656e67696e654f70796e53616665536176696f75722f6e6f2d73656c65637465642d6f746f6b656e4f70796e53616665536176696f75722f6f746f6b656e2d62616c616e63652d746f6f2d6c6f774f70796e53616665536176696f75722f6e6f742d656e6f7567682d746f2d77697468647261774f70796e53616665536176696f75722f636f756c642d6e6f742d7472616e736665722d636f6c6c61746572616c546f6b656ea264697066735822122006fc785d491742424ab9b90a8c042bdec11ef8d2a1913ffea868ed0cecdf204064736f6c634300070600334f70796e53616665536176696f75722f696e76616c69642d7363616c65642d6c69712d726174696f4f70796e53616665536176696f75722f696e76616c69642d6b65657065722d7061796f75744f70796e53616665536176696f75722f6e756c6c2d736166652d6d616e616765724f70796e53616665536176696f75722f6e756c6c2d64656661756c742d63726174696f4f70796e53616665536176696f75722f696e76616c69642d7061796f75742d746f2d736166652d73697a654f70796e53616665536176696f75722f696e76616c69642d6d696e2d7061796f75742d76616c75654f70796e53616665536176696f75722f6e756c6c2d736176696f75722d72656769737472794f70796e53616665536176696f75722f6e756c6c2d636f6c6c61746572616c2d6a6f696e4f70796e53616665536176696f75722f6e756c6c2d6f7261636c652d72656c617965724f70796e53616665536176696f75722f696e76616c69642d64656661756c742d646573697265642d63726174696f4f70796e53616665536176696f75722f696e76616c69642d6a6f696e2d646563696d616c734f70796e53616665536176696f75722f6e756c6c2d6f70796e2d736166652d736176696f75722d6f70657261746f724f70796e53616665536176696f75722f6e756c6c2d6c69717569646174696f6e2d656e67696e65",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806386426af41161010f578063c2ee3a08116100a2578063e5b5019a11610071578063e5b5019a1461045b578063ee236f2014610463578063f364e1801461046b578063f85fc0ab14610473576101f0565b8063c2ee3a081461041d578063d14d60d614610425578063d951e15a1461044b578063e2c0f58d14610453576101f0565b8063b2016bd4116100de578063b2016bd41461036d578063b5a8689414610375578063b9b0bb39146103a1578063bb287baf146103f7576101f0565b806386426af4146103235780638dbdbe6d1461032b5780638f7e43e81461035d578063aca542d914610365576101f0565b806356b7661e116101875780636a146024116101565780636a146024146102d257806374db5962146102da57806383d35fc5146102fd578063851cad901461029a576101f0565b806356b7661e146102b257806357c90441146102ba5780635bfd62a6146102c257806367aea313146102ca576101f0565b806344bf3c72116101c357806344bf3c72146102925780634b4d66871461029a5780634faf61ab146102a2578063552033c4146102aa576101f0565b8063097ab423146101f55780632f4bab6d146102375780634094a2fa14610251578063441a3e701461026d575b600080fd5b61021b6004803603602081101561020b57600080fd5b50356001600160a01b031661047b565b604080516001600160a01b039092168252519081900360200190f35b61023f610496565b60408051918252519081900360200190f35b61025961049c565b604080519115158252519081900360200190f35b6102906004803603604081101561028357600080fd5b50803590602001356106bc565b005b61021b610b9a565b61023f610ba9565b61021b610baf565b61023f610bbe565b61023f610bce565b61021b610bd4565b61023f610be3565b61021b610be9565b61023f610bf8565b610290600480360360408110156102f057600080fd5b5080359060200135610c04565b6102596004803603602081101561031357600080fd5b50356001600160a01b0316611014565b61023f6112d7565b6102906004803603606081101561034157600080fd5b50803590602081013590604001356001600160a01b03166112df565b61023f611a4f565b61023f611a55565b61021b611a64565b61023f6004803603604081101561038b57600080fd5b50803590602001356001600160a01b0316611a73565b6103d7600480360360608110156103b757600080fd5b506001600160a01b03813581169160208101359160409091013516611a90565b604080519315158452602084019290925282820152519081900360600190f35b61023f6004803603602081101561040d57600080fd5b50356001600160a01b031661264f565b61023f612661565b61023f6004803603602081101561043b57600080fd5b50356001600160a01b0316612666565b61021b612bd1565b61021b612be0565b61023f612bef565b61023f612bf5565b61021b612e0f565b61023f612e1e565b600c602052600090815260409020546001600160a01b031681565b60095481565b600254600d546040805163e824600f60e01b8152905160009384936001600160a01b039182169363d07900bb93919092169163e824600f916004808301926020929190829003018186803b1580156104f357600080fd5b505afa158015610507573d6000803e3d6000fd5b505050506040513d602081101561051d57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926060929190829003018186803b15801561055c57600080fd5b505afa158015610570573d6000803e3d6000fd5b505050506040513d606081101561058657600080fd5b5051604080516320531bc960e01b8152905191925060009182916001600160a01b038516916320531bc991600480820192602092909190829003018186803b1580156105d157600080fd5b505afa1580156105e5573d6000803e3d6000fd5b505050506040513d60208110156105fb57600080fd5b5051604080516309fa15b560e31b815281516001600160a01b0390931692634fd0ada892600480840193919291829003018186803b15801561063c57600080fd5b505afa158015610650573d6000803e3d6000fd5b505050506040513d604081101561066657600080fd5b508051602090910151909250905061068081158315612e23565b1561069157600093505050506106b9565b670de0b6b3a76400006106a660065484612e27565b816106ad57fe5b04600754111593505050505b90565b338281610709576040805162461bcd60e51b815260206004820152601660248201527529b0b332a9b0bb34b7bab917b73ab63616b7bbb732b960511b604482015290519081900360640190fd5b600354604080516351526bb760e11b8152600481018490529051610892926001600160a01b03169163a2a4d76e916024808301926020929190829003018186803b15801561075657600080fd5b505afa15801561076a573d6000803e3d6000fd5b505050506040513d602081101561078057600080fd5b5051600354604080516351526bb760e11b81526004810186905290516001600160a01b03938416878516149390921691634fa053b191839163a2a4d76e91602480820192602092909190829003018186803b1580156107de57600080fd5b505afa1580156107f2573d6000803e3d6000fd5b505050506040513d602081101561080857600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039283166004820152602481018890529188166044830152516064808301926020929190829003018186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d602081101561088857600080fd5b5051600114612e23565b6108e3576040805162461bcd60e51b815260206004820152601b60248201527f53616665536176696f75722f6e6f742d6f776e696e672d736166650000000000604482015290519081900360640190fd5b6002600054141561093b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000558261097c5760405162461bcd60e51b815260040180806020018281038252602b81526020018061312f602b913960400191505060405180910390fd5b6003546040805163434efcbd60e01b81526004810187905290516000926001600160a01b03169163434efcbd916024808301926020929190829003018186803b1580156109c857600080fd5b505afa1580156109dc573d6000803e3d6000fd5b505050506040513d60208110156109f257600080fd5b50516001600160a01b0381166000908152600b6020526040902054909150841115610a4e5760405162461bcd60e51b81526004018080602001828103825260268152602001806132666026913960400191505060405180910390fd5b6001600160a01b0381166000908152600b6020526040902054610a719085612e89565b6001600160a01b038083166000908152600b6020908152604080832094909455600c815283822054845163a9059cbb60e01b8152336004820152602481018a9052945193169363a9059cbb9360448083019491928390030190829087803b158015610adb57600080fd5b505af1158015610aef573d6000803e3d6000fd5b505050506040513d6020811015610b0557600080fd5b50506001600160a01b0381166000908152600b6020526040902054610b4b576001600160a01b0381166000908152600c6020526040902080546001600160a01b03191690555b6040805185815290516001600160a01b03831691879133917f457f950b75085c30ff780acd57bde642ff1316cc4aad9f286af2c1ffc4163a78919081900360200190a450506001600055505050565b6001546001600160a01b031681565b6103e881565b6002546001600160a01b031681565b6b033b2e3c9fd0803ce800000081565b60085481565b6003546001600160a01b031681565b60075481565b6004546001600160a01b031681565b670de0b6b3a764000081565b338281610c51576040805162461bcd60e51b815260206004820152601660248201527529b0b332a9b0bb34b7bab917b73ab63616b7bbb732b960511b604482015290519081900360640190fd5b600354604080516351526bb760e11b8152600481018490529051610c9e926001600160a01b03169163a2a4d76e916024808301926020929190829003018186803b15801561075657600080fd5b610cef576040805162461bcd60e51b815260206004820152601b60248201527f53616665536176696f75722f6e6f742d6f776e696e672d736166650000000000604482015290519081900360640190fd5b600254600d546040805163e824600f60e01b815290516000936a084595161401484a000000936001600160a01b03918216936375502d3c93919092169163e824600f916004808301926020929190829003018186803b158015610d5157600080fd5b505afa158015610d65573d6000803e3d6000fd5b505050506040513d6020811015610d7b57600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926020929190829003018186803b158015610dba57600080fd5b505afa158015610dce573d6000803e3d6000fd5b505050506040513d6020811015610de457600080fd5b505181610ded57fe5b6003546040805163434efcbd60e01b8152600481018a905290519390920493506000926001600160a01b039091169163434efcbd916024808301926020929190829003018186803b158015610e4157600080fd5b505afa158015610e55573d6000803e3d6000fd5b505050506040513d6020811015610e6b57600080fd5b5051905081610eab5760405162461bcd60e51b8152600401808060200182810382526028815260200180612fc16028913960400191505060405180910390fd5b848210610ee95760405162461bcd60e51b81526004018080602001828103825260268152602001806131096026913960400191505060405180910390fd5b6103e8851115610f2a5760405162461bcd60e51b81526004018080602001828103825260228152602001806130166022913960400191505060405180910390fd5b84600a6000600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d6020811015610fa757600080fd5b50518152602081810192909252604090810160009081206001600160a01b038616808352908452908290209390935580518881529051899233927ff3e2ede39d07e1a6e23c2557ac40ad8b94b311a0515c0ef868c62aab07ea89e2929081900390910190a4505050505050565b60008061102083612666565b90506000198114156110365760009150506112d2565b6001600160a01b0383166000908152600b602052604090205461105d5760009150506112d2565b61106561049c565b6110735760009150506112d2565b600d54604080516367aea31360e01b815290516000926001600160a01b0316916367aea313916004808301926020929190829003018186803b1580156110b857600080fd5b505afa1580156110cc573d6000803e3d6000fd5b505050506040513d60208110156110e257600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b15801561113057600080fd5b505afa158015611144573d6000803e3d6000fd5b505050506040513d602081101561115a57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b03881660248301528051604480840193829003018186803b1580156111a457600080fd5b505afa1580156111b8573d6000803e3d6000fd5b505050506040513d60408110156111ce57600080fd5b50516006546008549192506111e291612e27565b8110156111f4576000925050506112d2565b600f546001600160a01b038581166000908152600c6020526040812054600654919383169263d8af50649291169061122d908790612ecb565b600e54604080516001600160e01b031960e087901b1681526001600160a01b03948516600482015260248101939093529216604482015290516064808301926020929190829003018186803b15801561128557600080fd5b505afa158015611299573d6000803e3d6000fd5b505050506040513d60208110156112af57600080fd5b50516001600160a01b0386166000908152600b6020526040902054101593505050505b919050565b633b9aca0081565b60015460408051631589b68960e21b81523060048201819052915191926001600160a01b031691635626da2491602480820192602092909190829003018186803b15801561132c57600080fd5b505afa158015611340573d6000803e3d6000fd5b505050506040513d602081101561135657600080fd5b50516001146113965760405162461bcd60e51b815260040180806020018281038252602e8152602001806131f0602e913960400191505060405180910390fd5b3384816113e3576040805162461bcd60e51b815260206004820152601660248201527529b0b332a9b0bb34b7bab917b73ab63616b7bbb732b960511b604482015290519081900360640190fd5b600354604080516351526bb760e11b8152600481018490529051611430926001600160a01b03169163a2a4d76e916024808301926020929190829003018186803b15801561075657600080fd5b611481576040805162461bcd60e51b815260206004820152601b60248201527f53616665536176696f75722f6e6f742d6f776e696e672d736166650000000000604482015290519081900360640190fd5b600260005414156114d9576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000558461151a5760405162461bcd60e51b815260040180806020018281038252602281526020018061308a6022913960400191505060405180910390fd5b600f5460408051633a7685eb60e01b81526001600160a01b03878116600483015291519190921691633a7685eb916024808301926020929190829003018186803b15801561156757600080fd5b505afa15801561157b573d6000803e3d6000fd5b505050506040513d602081101561159157600080fd5b505115156001146115e9576040805162461bcd60e51b815260206004820181905260248201527f4f70796e53616665536176696f75722f666f7262696464656e2d6f746f6b656e604482015290519081900360640190fd5b6003546040805163434efcbd60e01b81526004810189905290516000926001600160a01b03169163434efcbd916024808301926020929190829003018186803b15801561163557600080fd5b505afa158015611649573d6000803e3d6000fd5b505050506040513d602081101561165f57600080fd5b505190506001600160a01b0381166116be576040805162461bcd60e51b815260206004820152601c60248201527f4f70796e53616665536176696f75722f6e756c6c2d68616e646c657200000000604482015290519081900360640190fd5b6001600160a01b038181166000908152600c60205260409020546116eb9190811690871681149015612e23565b6117265760405162461bcd60e51b815260040180806020018281038252602b81526020018061305f602b913960400191505060405180910390fd5b600d54604080516367aea31360e01b815290516000926001600160a01b0316916367aea313916004808301926020929190829003018186803b15801561176b57600080fd5b505afa15801561177f573d6000803e3d6000fd5b505050506040513d602081101561179557600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d602081101561180d57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b03861660248301528051604480840193829003018186803b15801561185757600080fd5b505afa15801561186b573d6000803e3d6000fd5b505050506040513d604081101561188157600080fd5b50602001519050806118c45760405162461bcd60e51b81526004018080602001828103825260278152602001806130386027913960400191505060405180910390fd5b604080516323b872dd60e01b81523360048201523060248201526044810189905290516001600160a01b038816916323b872dd9160648083019260209291908290030181600087803b15801561191957600080fd5b505af115801561192d573d6000803e3d6000fd5b505050506040513d602081101561194357600080fd5b50516119805760405162461bcd60e51b815260040180806020018281038252603281526020018061328c6032913960400191505060405180910390fd5b6001600160a01b0382166000908152600b60205260409020546119a39088612ecb565b6001600160a01b038084166000908152600b6020908152604080832094909455600c9052919091205416611a00576001600160a01b038281166000908152600c6020526040902080546001600160a01b0319169188169190911790555b6040805188815290516001600160a01b0384169133917f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f629181900360200190a350506001600055505050505050565b60065481565b6a084595161401484a00000081565b600e546001600160a01b031681565b600a60209081526000928352604080842090915290825290205481565b600154600090819081906001600160a01b03163314611ae05760405162461bcd60e51b815260040180806020018281038252602d815260200180612fe9602d913960400191505060405180910390fd5b6001600160a01b038616611b255760405162461bcd60e51b81526004018080602001828103825260238152602001806131a26023913960400191505060405180910390fd5b611b53611b3d86156001600160a01b03871615612f25565b6001546001600160a01b03898116911614612f25565b15611b68575060019150600019905080612646565b600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015611bb657600080fd5b505afa158015611bca573d6000803e3d6000fd5b505050506040513d6020811015611be057600080fd5b50518514611c1f5760405162461bcd60e51b815260040180806020018281038252602781526020018061315a6027913960400191505060405180910390fd5b6001600160a01b038481166000908152600c602052604090205416611c755760405162461bcd60e51b815260040180806020018281038252602281526020018061321e6022913960400191505060405180910390fd5b611c7d61049c565b611cb85760405162461bcd60e51b81526004018080602001828103825260298152602001806130ac6029913960400191505060405180910390fd5b6000611cc385612666565b90506000600d60009054906101000a90046001600160a01b03166001600160a01b03166367aea3136040518163ffffffff1660e01b815260040160206040518083038186803b158015611d1557600080fd5b505afa158015611d29573d6000803e3d6000fd5b505050506040513d6020811015611d3f57600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b158015611d8d57600080fd5b505afa158015611da1573d6000803e3d6000fd5b505050506040513d6020811015611db757600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b038a1660248301528051604480840193829003018186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d6040811015611e2b57600080fd5b5051600654600854919250611e3f91612e27565b811015611e93576040805162461bcd60e51b815260206004820152601960248201527f4f70796e53616665536176696f75722f74696e792d7361666500000000000000604482015290519081900360640190fd5b50611ea5600019821415821515612f25565b611ee05760405162461bcd60e51b815260040180806020018281038252602b8152602001806131c5602b913960400191505060405180910390fd5b6000611eee60065483612ecb565b600f546001600160a01b038881166000908152600c6020908152604080832054600e54825163362bd41960e21b81529186166004830152602482018890528516604482015290519596509194929093169263d8af506492606480840193829003018186803b158015611f5f57600080fd5b505afa158015611f73573d6000803e3d6000fd5b505050506040513d6020811015611f8957600080fd5b50516001600160a01b0388166000908152600b6020526040902054909150811115611fe55760405162461bcd60e51b81526004018080602001828103825260268152602001806132406026913960400191505060405180910390fd5b6001600160a01b038088166000908152600c6020908152604080832054600f54825163095ea7b360e01b8152908616600482015260248101879052915194169363095ea7b393604480840194938390030190829087803b15801561204857600080fd5b505af115801561205c573d6000803e3d6000fd5b505050506040513d602081101561207257600080fd5b5050600e54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a0823191602480830192602092919082900301818787803b1580156120c057600080fd5b505af11580156120d4573d6000803e3d6000fd5b505050506040513d60208110156120ea57600080fd5b5051600f546001600160a01b038a81166000908152600c602052604080822054600e54825163aea1a4a760e01b8152918516600483015260248201899052604482018a9052841660648201529051949550919092169263aea1a4a79260848084019391929182900301818387803b15801561216457600080fd5b505af1158015612178573d6000803e3d6000fd5b5050600e54604080516370a0823160e01b815230600482015290516000945061220193506001600160a01b03909216916370a082319160248082019260209290919082900301818887803b1580156121cf57600080fd5b505af11580156121e3573d6000803e3d6000fd5b505050506040513d60208110156121f957600080fd5b505183612e89565b6001600160a01b038a166000908152600b60205260409020549091506122279084612e89565b6001600160a01b038a166000908152600b60205260409020558381101561227f5760405162461bcd60e51b81526004018080602001828103825260348152602001806130d56034913960400191505060405180910390fd5b60055460408051634b6973a160e11b8152600481018d90526001600160a01b038c81166024830152915191909216916396d2e74291604480830192600092919082900301818387803b1580156122d457600080fd5b505af11580156122e8573d6000803e3d6000fd5b5050600e54600d546040805163095ea7b360e01b81526001600160a01b039283166004820152600060248201819052915192909316945063095ea7b39350604480840193602093929083900390910190829087803b15801561234957600080fd5b505af115801561235d573d6000803e3d6000fd5b505050506040513d602081101561237357600080fd5b5050600e54600d546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018990529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156123ce57600080fd5b505af11580156123e2573d6000803e3d6000fd5b505050506040513d60208110156123f857600080fd5b5050600d5460408051633b4da69f60e01b81523060048201526024810188905290516001600160a01b0390921691633b4da69f9160448082019260009290919082900301818387803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b505060048054600d546040805163e824600f60e01b815290516001600160a01b0393841696506399bec3159550929091169263e824600f928282019260209290829003018186803b1580156124b557600080fd5b505afa1580156124c9573d6000803e3d6000fd5b505050506040513d60208110156124df57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b038d166024830152306044830152600060648301819052608483018a905260a48301819052905160c48084019382900301818387803b15801561254757600080fd5b505af115801561255b573d6000803e3d6000fd5b5050600e546001600160a01b0316915063a9059cbb90508c61257d8489612e89565b6040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156125c357600080fd5b505af11580156125d7573d6000803e3d6000fd5b505050506040513d60208110156125ed57600080fd5b50506040805186815290516001600160a01b03808c16928d92918f16917f10a18796c8582ce78a5fd5fac9222c8ee18b16bd1523926d8803567527aac3609181900360200190a460018560065497509750975050505050505b93509350939050565b600b6020526000908152604090205481565b600181565b6000806000600d60009054906101000a90046001600160a01b03166001600160a01b03166367aea3136040518163ffffffff1660e01b815260040160206040518083038186803b1580156126b957600080fd5b505afa1580156126cd573d6000803e3d6000fd5b505050506040513d60208110156126e357600080fd5b5051600d546040805163e824600f60e01b815290516001600160a01b0393841693633d42250493169163e824600f916004808301926020929190829003018186803b15801561273157600080fd5b505afa158015612745573d6000803e3d6000fd5b505050506040513d602081101561275b57600080fd5b5051604080516001600160e01b031960e085901b16815260048101929092526001600160a01b03881660248301528051604480840193829003018186803b1580156127a557600080fd5b505afa1580156127b9573d6000803e3d6000fd5b505050506040513d60408110156127cf57600080fd5b508051602091820151600254600d546040805163e824600f60e01b815290519497509295506000946001600160a01b039283169463d07900bb94939092169263e824600f9260048083019392829003018186803b15801561282f57600080fd5b505afa158015612843573d6000803e3d6000fd5b505050506040513d602081101561285957600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926060929190829003018186803b15801561289857600080fd5b505afa1580156128ac573d6000803e3d6000fd5b505050506040513d60608110156128c257600080fd5b5051604080516309fa15b560e31b8152815192935060009283926001600160a01b03861692634fd0ada89260048083019392829003018186803b15801561290857600080fd5b505afa15801561291c573d6000803e3d6000fd5b505050506040513d604081101561293257600080fd5b5080516020909101519092509050612956841561295184158415612e23565b612e23565b1561296a57600019955050505050506112d2565b6000600a6000600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156129be57600080fd5b505afa1580156129d2573d6000803e3d6000fd5b505050506040513d60208110156129e857600080fd5b50518152602081810192909252604090810160009081206001600160a01b038c16825290925290205415612ac057600a6000600d60009054906101000a90046001600160a01b03166001600160a01b031663e824600f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612a6857600080fd5b505afa158015612a7c573d6000803e3d6000fd5b505050506040513d6020811015612a9257600080fd5b50518152602081810192909252604090810160009081206001600160a01b038c168252909252902054612ac4565b6009545b905060006064612b77612b716b033b2e3c9fd0803ce8000000612b62600260009054906101000a90046001600160a01b03166001600160a01b031663c5b748c06040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612b3057600080fd5b505af1158015612b44573d6000803e3d6000fd5b505050506040513d6020811015612b5a57600080fd5b50518b612e27565b81612b6957fe5b046001612ecb565b84612e27565b81612b7e57fe5b049050600084612b9683670de0b6b3a7640000612e27565b81612b9d57fe5b049050878111612bb8576000985050505050505050506112d2565b612bc28189612e89565b985050505050505050506112d2565b6005546001600160a01b031681565b600f546001600160a01b031681565b60001981565b600254600d546040805163e824600f60e01b8152905160009384936001600160a01b039182169363d07900bb93919092169163e824600f916004808301926020929190829003018186803b158015612c4c57600080fd5b505afa158015612c60573d6000803e3d6000fd5b505050506040513d6020811015612c7657600080fd5b5051604080516001600160e01b031960e085901b1681526004810192909252516024808301926060929190829003018186803b158015612cb557600080fd5b505afa158015612cc9573d6000803e3d6000fd5b505050506040513d6060811015612cdf57600080fd5b5051604080516320531bc960e01b8152905191925060009182916001600160a01b038516916320531bc991600480820192602092909190829003018186803b158015612d2a57600080fd5b505afa158015612d3e573d6000803e3d6000fd5b505050506040513d6020811015612d5457600080fd5b5051604080516309fa15b560e31b815281516001600160a01b0390931692634fd0ada892600480840193919291829003018186803b158015612d9557600080fd5b505afa158015612da9573d6000803e3d6000fd5b505050506040513d6040811015612dbf57600080fd5b5080516020909101519092509050612dd981158315612e23565b15612dea57600093505050506106b9565b670de0b6b3a7640000612dff60065484612e27565b81612e0657fe5b04935050505090565b600d546001600160a01b031681565b606481565b1790565b600082612e3657506000612e83565b82820282848281612e4357fe5b0414612e805760405162461bcd60e51b81526004018080602001828103825260218152602001806131816021913960400191505060405180910390fd5b90505b92915050565b6000612e8083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612f29565b600082820183811015612e80576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b1690565b60008184841115612fb85760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612f7d578181015183820152602001612f65565b50505050905090810190601f168015612faa5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505090039056fe4f70796e53616665536176696f75722f696e76616c69642d7363616c65642d6c69712d726174696f4f70796e53616665536176696f75722f63616c6c65722d6e6f742d6c69717569646174696f6e2d656e67696e654f70796e53616665536176696f75722f657863656564732d6d61782d63726174696f4f70796e53616665536176696f75722f736166652d646f65732d6e6f742d686176652d646562744f70796e53616665536176696f75722f736166652d6f746f6b656e2d696e636f6d7061746962696c6974794f70796e53616665536176696f75722f6e756c6c2d6f546f6b656e2d616d6f756e744f70796e53616665536176696f75722f736d616c6c2d6b65657065722d7061796f75742d76616c75654f70796e53616665536176696f75722f6e6f742d656e6f7567682d6f746f6b656e2d636f6c6c61746572616c2d737761707065644f70796e53616665536176696f75722f696e76616c69642d646573697265642d63726174696f4f70796e53616665536176696f75722f6e756c6c2d636f6c6c61746572616c546f6b656e2d616d6f756e744f70796e53616665536176696f75722f696e76616c69642d636f6c6c61746572616c2d74797065536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f70796e53616665536176696f75722f6e756c6c2d6b65657065722d616464726573734f70796e53616665536176696f75722f696e76616c69642d746f6b656e732d757365642d746f2d7361766553616665536176696f75722f6e6f742d617070726f7665642d696e2d6c69717569646174696f6e2d656e67696e654f70796e53616665536176696f75722f6e6f2d73656c65637465642d6f746f6b656e4f70796e53616665536176696f75722f6f746f6b656e2d62616c616e63652d746f6f2d6c6f774f70796e53616665536176696f75722f6e6f742d656e6f7567682d746f2d77697468647261774f70796e53616665536176696f75722f636f756c642d6e6f742d7472616e736665722d636f6c6c61746572616c546f6b656ea264697066735822122006fc785d491742424ab9b90a8c042bdec11ef8d2a1913ffea868ed0cecdf204064736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5057,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1331,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "liquidationEngine",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(LiquidationEngineLike)1131"
      },
      {
        "astId": 1333,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "oracleRelayer",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(OracleRelayerLike)1232"
      },
      {
        "astId": 1335,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "safeManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GebSafeManagerLike)1121"
      },
      {
        "astId": 1337,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "safeEngine",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(SAFEEngineLike)1302"
      },
      {
        "astId": 1339,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "saviourRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(SAFESaviourRegistryLike)1316"
      },
      {
        "astId": 1363,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "keeperPayout",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1365,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "minKeeperPayoutValue",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1367,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "payoutToSAFESize",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1369,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "defaultDesiredCollateralizationRatio",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1375,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "desiredCollateralizationRatios",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1714,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "oTokenCover",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1718,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "oTokenSelection",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 1720,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "collateralJoin",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CollateralJoinLike)1052"
      },
      {
        "astId": 1722,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "collateralToken",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ERC20Like)1093"
      },
      {
        "astId": 1724,
        "contract": "contracts/saviours/OpynSafeSaviour.sol:OpynSafeSaviour",
        "label": "opynSafeSaviourOperator",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(OpynSafeSaviourOperator)3446"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(CollateralJoinLike)1052": {
        "encoding": "inplace",
        "label": "contract CollateralJoinLike",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20Like)1093": {
        "encoding": "inplace",
        "label": "contract ERC20Like",
        "numberOfBytes": "20"
      },
      "t_contract(GebSafeManagerLike)1121": {
        "encoding": "inplace",
        "label": "contract GebSafeManagerLike",
        "numberOfBytes": "20"
      },
      "t_contract(LiquidationEngineLike)1131": {
        "encoding": "inplace",
        "label": "contract LiquidationEngineLike",
        "numberOfBytes": "20"
      },
      "t_contract(OpynSafeSaviourOperator)3446": {
        "encoding": "inplace",
        "label": "contract OpynSafeSaviourOperator",
        "numberOfBytes": "20"
      },
      "t_contract(OracleRelayerLike)1232": {
        "encoding": "inplace",
        "label": "contract OracleRelayerLike",
        "numberOfBytes": "20"
      },
      "t_contract(SAFEEngineLike)1302": {
        "encoding": "inplace",
        "label": "contract SAFEEngineLike",
        "numberOfBytes": "20"
      },
      "t_contract(SAFESaviourRegistryLike)1316": {
        "encoding": "inplace",
        "label": "contract SAFESaviourRegistryLike",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}