{
  "address": "0x340Ed8bFf5Be8175D30849e39cd87b06364E0Fb5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_otoken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundOtoken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_otoken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ActionType",
              "name": "actionType",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "secondAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vaultId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct ActionArgs[]",
          "name": "_actions",
          "type": "tuple[]"
        }
      ],
      "name": "operate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "redeemable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_otoken",
          "type": "address"
        }
      ],
      "name": "toggleRedeemable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67d57735e28c29aabd5303f616d62a92fa9984741ef231a1c0aad8f0d8103d91",
  "receipt": {
    "to": null,
    "from": "0xB4410cA4B6c25102A0De8863B83A0Bc6F94f7d24",
    "contractAddress": "0x340Ed8bFf5Be8175D30849e39cd87b06364E0Fb5",
    "transactionIndex": 2,
    "gasUsed": "745012",
    "logsBloom": "0x
    "blockHash": "0x7c263778b8cbd9127460debc4d012255516a5b59352d37328406cb3096094b1c",
    "transactionHash": "0x67d57735e28c29aabd5303f616d62a92fa9984741ef231a1c0aad8f0d8103d91",
    "logs": [],
    "blockNumber": 23931822,
    "cumulativeGasUsed": "920605",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4ab7740a3c4c741a16859aca93eee72c",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundOtoken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ActionType\",\"name\":\"actionType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"secondAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct ActionArgs[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"}],\"name\":\"operate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"redeemable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_otoken\",\"type\":\"address\"}],\"name\":\"toggleRedeemable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test-utils/OpynV2ControllerMock.sol\":\"OpynV2ControllerMock\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/OpynV2ControllerLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nenum ActionType {\\n    OpenVault,\\n    MintShortOption,\\n    BurnShortOption,\\n    DepositLongOption,\\n    WithdrawLongOption,\\n    DepositCollateral,\\n    WithdrawCollateral,\\n    SettleVault,\\n    Redeem,\\n    Call\\n}\\n\\nstruct ActionArgs {\\n    ActionType actionType;\\n    address owner;\\n    address secondAddress;\\n    address asset;\\n    uint256 vaultId;\\n    uint256 amount;\\n    uint256 index;\\n    bytes data;\\n}\\n\\nabstract contract OpynV2ControllerLike {\\n    function operate(ActionArgs[] calldata _actions) external virtual;\\n\\n    function getPayout(address _otoken, uint256 _amount) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3a33dfe273e841233898bc995db5183cad55dcbe16eb1bd82606735640fc6f1\",\"license\":\"MIT\"},\"contracts/interfaces/OpynV2OTokenLike.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nabstract contract OpynV2OTokenLike {\\n    function getOtokenDetails()\\n        external\\n        view\\n        virtual\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x31640b1ae94aff696fdf6c79b5c3189e8d5cf1564e432540ffc536b778dcc889\",\"license\":\"MIT\"},\"contracts/test-utils/OpynV2ControllerMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\npragma experimental ABIEncoderV2;\\n\\nimport '../interfaces/OpynV2OTokenLike.sol';\\nimport '../interfaces/OpynV2ControllerLike.sol';\\nimport './OpynV2OTokenMock.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\n\\ncontract OpynV2ControllerMock is OpynV2ControllerLike {\\n    mapping(address => mapping(address => uint256)) public balances;\\n    mapping(address => uint256) public redeemable;\\n\\n    address public owner;\\n\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    modifier ownerOnly() {\\n        require(owner == msg.sender, 'not owner');\\n        _;\\n    }\\n\\n    modifier isRedeemable(address _otoken) {\\n        require(redeemable[_otoken] == 1, 'not redeemable');\\n        _;\\n    }\\n\\n    function fundOtoken(\\n        address _otoken,\\n        address _collateralAsset,\\n        uint256 _amount\\n    ) external {\\n        ERC20Burnable(_collateralAsset).transferFrom(msg.sender, address(this), _amount);\\n        balances[_otoken][_collateralAsset] = balances[_otoken][_collateralAsset] + _amount;\\n    }\\n\\n    function toggleRedeemable(address _otoken) external ownerOnly {\\n        redeemable[_otoken] = (redeemable[_otoken] + 1) % 2;\\n    }\\n\\n    function operate(ActionArgs[] calldata _actions) external override {\\n        // check length is one and action is redeem then just send the tokens\\n        require(\\n            _actions.length == 1 && _actions[0].actionType == ActionType.Redeem,\\n            'mock made for single type of calls'\\n        );\\n        require(redeemable[_actions[0].asset] == 1, 'not redeemable');\\n        OpynV2OTokenLike otoken = OpynV2OTokenLike(_actions[0].asset);\\n\\n        (address collateralAsset, , , , , ) = otoken.getOtokenDetails();\\n\\n        require(_actions[0].amount <= ERC20Burnable(address(otoken)).balanceOf(msg.sender), 'too much redeemed');\\n\\n        uint256 amountToSend =\\n            (_actions[0].amount / ERC20Burnable(address(otoken)).totalSupply()) *\\n                (balances[address(otoken)][collateralAsset]);\\n\\n        require(amountToSend <= balances[address(otoken)][collateralAsset], 'not enough collateral');\\n\\n        balances[address(otoken)][collateralAsset] = balances[address(otoken)][collateralAsset] - amountToSend;\\n\\n        ERC20Burnable(collateralAsset).transfer(_actions[0].secondAddress, amountToSend);\\n\\n        OpynV2OTokenMock(address(otoken)).burn(msg.sender, _actions[0].amount);\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount) public view override isRedeemable(_otoken) returns (uint256) {\\n        (address collateralAsset, , , , , ) = OpynV2OTokenLike(_otoken).getOtokenDetails();\\n        return ((_amount * balances[_otoken][collateralAsset]) / (ERC20Burnable(_otoken).totalSupply()));\\n    }\\n}\\n\",\"keccak256\":\"0x9f233e9c1907ac1d7960c6704d073bd753aa7e833e142540532f6a85204aab62\",\"license\":\"MIT\"},\"contracts/test-utils/OpynV2OTokenMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.7 <=0.7.6;\\n\\nimport '../interfaces/OpynV2OTokenLike.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol';\\n\\ncontract OpynV2OTokenMock is OpynV2OTokenLike, ERC20Burnable {\\n    address public controller;\\n    address public collateralAsset;\\n    address public underlyingAsset;\\n    address public strikeAsset;\\n    uint256 public strikePrice;\\n    uint256 public expiryTimestamp;\\n    bool public isPut;\\n    address public owner;\\n\\n    constructor(\\n        address _collateralAsset,\\n        address _underlyingAddress,\\n        address _strikeAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiryTimestamp,\\n        bool _isPut\\n    ) ERC20('oToken-TEST', 'OTEST') {\\n        collateralAsset = _collateralAsset;\\n        underlyingAsset = _underlyingAddress;\\n        strikeAsset = _strikeAsset;\\n        strikePrice = _strikePrice;\\n        expiryTimestamp = _expiryTimestamp;\\n        isPut = _isPut;\\n        owner = msg.sender;\\n    }\\n\\n    modifier ownerOnly() {\\n        require(owner == msg.sender, 'not owner');\\n        _;\\n    }\\n\\n    function mint(address acc, uint256 am) public {\\n        ERC20._mint(acc, am);\\n    }\\n\\n    function burn(address acc, uint256 am) public {\\n        ERC20._burn(acc, am);\\n    }\\n\\n    function setCollateralAsset(address _collateralAsset) external ownerOnly {\\n        collateralAsset = _collateralAsset;\\n    }\\n\\n    function setUnderlyingAsset(address _underlyingAsset) external ownerOnly {\\n        underlyingAsset = _underlyingAsset;\\n    }\\n\\n    function setStrikeAsset(address _strikeAsset) public ownerOnly {\\n        strikeAsset = _strikeAsset;\\n    }\\n\\n    function setStrikePrice(uint256 _strikePrice) public ownerOnly {\\n        strikePrice = _strikePrice;\\n    }\\n\\n    function setExpiryTimestamp(uint256 _expiryTimestamp) public ownerOnly {\\n        expiryTimestamp = _expiryTimestamp;\\n    }\\n\\n    function setPut(bool _isPut) public ownerOnly {\\n        isPut = _isPut;\\n    }\\n\\n    function getOtokenDetails()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        return (collateralAsset, underlyingAsset, strikeAsset, strikePrice, expiryTimestamp, isPut);\\n    }\\n}\\n\",\"keccak256\":\"0xdfb5b1e4d4a914ab7d4130a8e7a49d937b0ec012a49f2edb67efc8e249c24fd5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600280546001600160a01b03191633179055610c22806100326000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063565eea191161005b578063565eea19146100d35780638da5cb5b146100e6578063b617f0c6146100fb578063c23f001f1461010e5761007d565b80630e52c8761461008257806330cc9db014610097578063484267a4146100aa575b600080fd5b610095610090366004610880565b610121565b005b6100956100a5366004610949565b610179565b6100bd6100b8366004610880565b61022c565b6040516100ca9190610bac565b60405180910390f35b6100bd6100e1366004610989565b61023e565b6100ee61039a565b6040516100ca9190610a74565b6100956101093660046109b4565b6103a9565b6100bd61011c3660046108a3565b610851565b6002546001600160a01b031633146101545760405162461bcd60e51b815260040161014b90610b89565b60405180910390fd5b6001600160a01b03166000908152600160208190526040909120805482019091169055565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906101a990339030908690600401610a88565b602060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb9190610a23565b506001600160a01b039283166000908152602081815260408083209490951682529290925291902080549091019055565b60016020526000908152604090205481565b6001600160a01b03821660009081526001602081905260408220548491146102785760405162461bcd60e51b815260040161014b90610b61565b6000846001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb91906108db565b50505050509050846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190610a5c565b6001600160a01b038087166000908152602081815260408083209386168352929052205485028161039057fe5b0495945050505050565b6002546001600160a01b031681565b6001811480156103f057506008828260008181106103c357fe5b90506020028101906103d59190610bb5565b6103e3906020810190610a3d565b60098111156103ee57fe5b145b61040c5760405162461bcd60e51b815260040161014b90610ac5565b600160008383600081811061041d57fe5b905060200281019061042f9190610bb5565b610440906080810190606001610880565b6001600160a01b03166001600160a01b03168152602001908152602001600020546001146104805760405162461bcd60e51b815260040161014b90610b61565b60008282600081811061048f57fe5b90506020028101906104a19190610bb5565b6104b2906080810190606001610880565b90506000816001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b1580156104ef57600080fd5b505afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906108db565b50506040516370a0823160e01b8152939450506001600160a01b038516926370a08231925061055b91503390600401610a74565b60206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610a5c565b848460008181106105b857fe5b90506020028101906105ca9190610bb5565b60a0013511156105ec5760405162461bcd60e51b815260040161014b90610b36565b6001600160a01b0380831660008181526020818152604080832094861683529381528382205484516318160ddd60e01b8152945192949093926318160ddd92600480840193919291829003018186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190610a5c565b8686600081811061068d57fe5b905060200281019061069f9190610bb5565b60a00135816106aa57fe5b6001600160a01b03808716600090815260208181526040808320938916835292905220549190049190910291508111156106f65760405162461bcd60e51b815260040161014b90610b07565b6001600160a01b038381166000908152602081815260408083209386168084529390915281208054849003905563a9059cbb90879087908161073457fe5b90506020028101906107469190610bb5565b610757906060810190604001610880565b836040518363ffffffff1660e01b8152600401610775929190610aac565b602060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190610a23565b50826001600160a01b0316639dc29fac33878760008181106107e557fe5b90506020028101906107f79190610bb5565b60a001356040518363ffffffff1660e01b8152600401610818929190610aac565b600060405180830381600087803b15801561083257600080fd5b505af1158015610846573d6000803e3d6000fd5b505050505050505050565b600060208181529281526040808220909352908152205481565b8051801515811461087b57600080fd5b919050565b600060208284031215610891578081fd5b813561089c81610bd4565b9392505050565b600080604083850312156108b5578081fd5b82356108c081610bd4565b915060208301356108d081610bd4565b809150509250929050565b60008060008060008060c087890312156108f3578182fd5b86516108fe81610bd4565b602088015190965061090f81610bd4565b604088015190955061092081610bd4565b606088015160808901519195509350915061093d60a0880161086b565b90509295509295509295565b60008060006060848603121561095d578283fd5b833561096881610bd4565b9250602084013561097881610bd4565b929592945050506040919091013590565b6000806040838503121561099b578182fd5b82356109a681610bd4565b946020939093013593505050565b600080602083850312156109c6578182fd5b823567ffffffffffffffff808211156109dd578384fd5b818501915085601f8301126109f0578384fd5b8135818111156109fe578485fd5b8660208083028501011115610a11578485fd5b60209290920196919550909350505050565b600060208284031215610a34578081fd5b61089c8261086b565b600060208284031215610a4e578081fd5b8135600a811061089c578182fd5b600060208284031215610a6d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082526022908201527f6d6f636b206d61646520666f722073696e676c652074797065206f662063616c6040820152616c7360f01b606082015260800190565b6020808252601590820152741b9bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604082015260600190565b6020808252601190820152701d1bdbc81b5d58da081c995919595b5959607a1b604082015260600190565b6020808252600e908201526d6e6f742072656465656d61626c6560901b604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b90815260200190565b6000823560fe19833603018112610bca578182fd5b9190910192915050565b6001600160a01b0381168114610be957600080fd5b5056fea26469706673582212207e5410656523b458ac157e79f8d8439dccc5108d7bc2953aa64ef4282d1f7bec64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063565eea191161005b578063565eea19146100d35780638da5cb5b146100e6578063b617f0c6146100fb578063c23f001f1461010e5761007d565b80630e52c8761461008257806330cc9db014610097578063484267a4146100aa575b600080fd5b610095610090366004610880565b610121565b005b6100956100a5366004610949565b610179565b6100bd6100b8366004610880565b61022c565b6040516100ca9190610bac565b60405180910390f35b6100bd6100e1366004610989565b61023e565b6100ee61039a565b6040516100ca9190610a74565b6100956101093660046109b4565b6103a9565b6100bd61011c3660046108a3565b610851565b6002546001600160a01b031633146101545760405162461bcd60e51b815260040161014b90610b89565b60405180910390fd5b6001600160a01b03166000908152600160208190526040909120805482019091169055565b6040516323b872dd60e01b81526001600160a01b038316906323b872dd906101a990339030908690600401610a88565b602060405180830381600087803b1580156101c357600080fd5b505af11580156101d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fb9190610a23565b506001600160a01b039283166000908152602081815260408083209490951682529290925291902080549091019055565b60016020526000908152604090205481565b6001600160a01b03821660009081526001602081905260408220548491146102785760405162461bcd60e51b815260040161014b90610b61565b6000846001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb91906108db565b50505050509050846001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561032b57600080fd5b505afa15801561033f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103639190610a5c565b6001600160a01b038087166000908152602081815260408083209386168352929052205485028161039057fe5b0495945050505050565b6002546001600160a01b031681565b6001811480156103f057506008828260008181106103c357fe5b90506020028101906103d59190610bb5565b6103e3906020810190610a3d565b60098111156103ee57fe5b145b61040c5760405162461bcd60e51b815260040161014b90610ac5565b600160008383600081811061041d57fe5b905060200281019061042f9190610bb5565b610440906080810190606001610880565b6001600160a01b03166001600160a01b03168152602001908152602001600020546001146104805760405162461bcd60e51b815260040161014b90610b61565b60008282600081811061048f57fe5b90506020028101906104a19190610bb5565b6104b2906080810190606001610880565b90506000816001600160a01b031663af0968fc6040518163ffffffff1660e01b815260040160c06040518083038186803b1580156104ef57600080fd5b505afa158015610503573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052791906108db565b50506040516370a0823160e01b8152939450506001600160a01b038516926370a08231925061055b91503390600401610a74565b60206040518083038186803b15801561057357600080fd5b505afa158015610587573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ab9190610a5c565b848460008181106105b857fe5b90506020028101906105ca9190610bb5565b60a0013511156105ec5760405162461bcd60e51b815260040161014b90610b36565b6001600160a01b0380831660008181526020818152604080832094861683529381528382205484516318160ddd60e01b8152945192949093926318160ddd92600480840193919291829003018186803b15801561064857600080fd5b505afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190610a5c565b8686600081811061068d57fe5b905060200281019061069f9190610bb5565b60a00135816106aa57fe5b6001600160a01b03808716600090815260208181526040808320938916835292905220549190049190910291508111156106f65760405162461bcd60e51b815260040161014b90610b07565b6001600160a01b038381166000908152602081815260408083209386168084529390915281208054849003905563a9059cbb90879087908161073457fe5b90506020028101906107469190610bb5565b610757906060810190604001610880565b836040518363ffffffff1660e01b8152600401610775929190610aac565b602060405180830381600087803b15801561078f57600080fd5b505af11580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190610a23565b50826001600160a01b0316639dc29fac33878760008181106107e557fe5b90506020028101906107f79190610bb5565b60a001356040518363ffffffff1660e01b8152600401610818929190610aac565b600060405180830381600087803b15801561083257600080fd5b505af1158015610846573d6000803e3d6000fd5b505050505050505050565b600060208181529281526040808220909352908152205481565b8051801515811461087b57600080fd5b919050565b600060208284031215610891578081fd5b813561089c81610bd4565b9392505050565b600080604083850312156108b5578081fd5b82356108c081610bd4565b915060208301356108d081610bd4565b809150509250929050565b60008060008060008060c087890312156108f3578182fd5b86516108fe81610bd4565b602088015190965061090f81610bd4565b604088015190955061092081610bd4565b606088015160808901519195509350915061093d60a0880161086b565b90509295509295509295565b60008060006060848603121561095d578283fd5b833561096881610bd4565b9250602084013561097881610bd4565b929592945050506040919091013590565b6000806040838503121561099b578182fd5b82356109a681610bd4565b946020939093013593505050565b600080602083850312156109c6578182fd5b823567ffffffffffffffff808211156109dd578384fd5b818501915085601f8301126109f0578384fd5b8135818111156109fe578485fd5b8660208083028501011115610a11578485fd5b60209290920196919550909350505050565b600060208284031215610a34578081fd5b61089c8261086b565b600060208284031215610a4e578081fd5b8135600a811061089c578182fd5b600060208284031215610a6d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b60208082526022908201527f6d6f636b206d61646520666f722073696e676c652074797065206f662063616c6040820152616c7360f01b606082015260800190565b6020808252601590820152741b9bdd08195b9bdd59da0818dbdb1b185d195c985b605a1b604082015260600190565b6020808252601190820152701d1bdbc81b5d58da081c995919595b5959607a1b604082015260600190565b6020808252600e908201526d6e6f742072656465656d61626c6560901b604082015260600190565b6020808252600990820152683737ba1037bbb732b960b91b604082015260600190565b90815260200190565b6000823560fe19833603018112610bca578182fd5b9190910192915050565b6001600160a01b0381168114610be957600080fd5b5056fea26469706673582212207e5410656523b458ac157e79f8d8439dccc5108d7bc2953aa64ef4282d1f7bec64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3787,
        "contract": "contracts/test-utils/OpynV2ControllerMock.sol:OpynV2ControllerMock",
        "label": "balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 3791,
        "contract": "contracts/test-utils/OpynV2ControllerMock.sol:OpynV2ControllerMock",
        "label": "redeemable",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3793,
        "contract": "contracts/test-utils/OpynV2ControllerMock.sol:OpynV2ControllerMock",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}