// SPDX-License-Identifier: MIT
pragma solidity >=0.6.7 <=0.7.6;

import '../interfaces/SAFEEngineLike.sol';

contract SafeEngineMock is SAFEEngineLike {
    // --- Data ---
    struct CollateralType {
        // Total debt issued for this specific collateral type
        uint256 debtAmount; // [wad]
        // Accumulator for interest accrued on this collateral type
        uint256 accumulatedRate; // [ray]
        // Floor price at which a SAFE is allowed to generate debt
        uint256 safetyPrice; // [ray]
        // Maximum amount of debt that can be generated with this collateral type
        uint256 debtCeiling; // [rad]
        // Minimum amount of debt that must be generated by a SAFE using this collateral
        uint256 debtFloor; // [rad]
        // Price at which a SAFE gets liquidated
        uint256 liquidationPrice; // [ray]
    }
    struct SAFE {
        // Total amount of collateral locked in a SAFE
        uint256 lockedCollateral; // [wad]
        // Total amount of debt generated by a SAFE
        uint256 generatedDebt; // [wad]
    }

    // Data about each collateral type
    mapping(bytes32 => CollateralType) private _collateralTypes;
    // Data about each SAFE
    mapping(bytes32 => mapping(address => SAFE)) private _safes;
    mapping(address => mapping(address => uint256)) private _safeRights;

    function safeRights(address owner, address user) public view override returns (uint256) {
        return _safeRights[owner][user];
    }

    function toggleSafeRights(address owner, address user) public {
        _safeRights[owner][user] = (_safeRights[owner][user] + 1) % 2;
    }

    function setCollateralType(
        bytes32 _collateralType,
        uint256 _debtAmount,
        uint256 _accumulatedRate,
        uint256 _safetyPrice,
        uint256 _debtCeiling,
        uint256 _debtFloor,
        uint256 _liquidationPrice
    ) public {
        _collateralTypes[_collateralType] = CollateralType({
            debtAmount: _debtAmount,
            accumulatedRate: _accumulatedRate,
            safetyPrice: _safetyPrice,
            debtCeiling: _debtCeiling,
            debtFloor: _debtFloor,
            liquidationPrice: _liquidationPrice
        });
    }

    function collateralTypes(bytes32 _collateralType)
        public
        view
        override
        returns (
            uint256 debtAmount, // [wad]
            uint256 accumulatedRate, // [ray]
            uint256 safetyPrice, // [ray]
            uint256 debtCeiling, // [rad]
            uint256 debtFloor, // [rad]
            uint256 liquidationPrice // [ray]
        )
    {
        CollateralType memory ct = _collateralTypes[_collateralType];
        return (ct.debtAmount, ct.accumulatedRate, ct.safetyPrice, ct.debtAmount, ct.debtFloor, ct.liquidationPrice);
    }

    function setSafe(
        bytes32 _collateralType,
        address _safeId,
        uint256 _lockedCollateral,
        uint256 _generatedDebt
    ) public {
        _safes[_collateralType][_safeId] = SAFE({lockedCollateral: _lockedCollateral, generatedDebt: _generatedDebt});
    }

    function safes(bytes32 _collateralType, address _safeId)
        public
        view
        override
        returns (
            uint256 lockedCollateral, // [wad]
            uint256 generatedDebt // [wad]
        )
    {
        SAFE memory s = _safes[_collateralType][_safeId];
        return (s.lockedCollateral, s.generatedDebt);
    }

    function modifySAFECollateralization(
        bytes32 collateralType,
        address safe,
        address collateralSource,
        address debtDestination,
        int256 deltaCollateral, // [wad]
        int256 deltaDebt // [wad]
    ) external override {
        // do nothing zzzZZZzzz
    }
}
